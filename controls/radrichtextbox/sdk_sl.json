[{"Name":"ChangeRibbonUIDataContext","ExampleInfo":{"Name":"ChangeRibbonUIDataContext","DirectoryName":"ChangeRibbonUIDataContext","ExampleFileNames":["ChangeRibbonUIDataContext_SL.csproj","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/ChangeRibbonUIDataContext/","Description":"Change ribbons data context \r\nThe example shows how the DataContext of RadRichTextBoxRIbbonUI can be changed run-time.\r\n\r\n[//]:","KeyWords":"ChangeRibbonUIDataContext,  replace,ui"},
{"Name":"CustomCodeFormattingLanguage","ExampleInfo":{"Name":"CustomCodeFormattingLanguage","DirectoryName":"CustomCodeFormattingLanguage","ExampleFileNames":["CustomCodeFormattingLanguage_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Keywords.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomCodeFormattingLanguage/","Description":"Custom Code Formatting Language\nThe demo demonstrates how you can plug a custom formatting language which to be used in the Code dialog. Additional information about the Code Block feature can be found in the following article: http://www.telerik.com/help/silverlight/radrichtextbox-features-code-block.html/ http://www.telerik.com/help/wpf/radrichtextbox-features-code-block.html\n\n[//]:","KeyWords":"CustomCodeFormattingLanguage,  create,programming,language,highlight,syntax,keyword"},
{"Name":"CustomField","ExampleInfo":{"Name":"CustomField","DirectoryName":"CustomField","ExampleFileNames":["CustomField_SL.csproj","App_SL.xaml","App_SL.xaml.cs","CustomField.cs","ExampleViewModel.cs","MainPage.xaml","MainPage.xaml.cs","SampleData\\SampleDocument.docx"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomField/","Description":" Custom Field\nThis example illustrates how to create custom field which calculates the total pages of the document and the current page number of a section. Regardless of the place where you have inserted the field at your document(Header, Footer, Body, FootNote, EndNote and etc.), you can obtain an information for the main document through its EvaluationContext property.","KeyWords":"CustomField"},
{"Name":"CustomFindReplaceDialog","ExampleInfo":{"Name":"CustomFindReplaceDialog","DirectoryName":"CustomFindReplaceDialog","ExampleFileNames":["CustomFindReplaceDialog_SL.csproj","App_SL.xaml","App_SL.xaml.cs","DocumentSelectReplaceStateService.cs","FindReplaceDialog.xaml","FindReplaceDialog.xaml.cs","MainPage.xaml","MainPage.xaml.cs","TelerikEditor_SL.xaml","TelerikEditor_SL.xaml.cs","TelerikHelper.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomFindReplaceDialog/","Description":"Custom Find Replace Dialog\r\nThis example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the attribute [CustomFindReplaceDialog].\r\n\r\n[//]:","KeyWords":"CustomFindReplaceDialog,  replace, inherit, modify"},
{"Name":"CustomFloatingBlockPropertiesDialogDemo","ExampleInfo":{"Name":"CustomFloatingBlockPropertiesDialogDemo","DirectoryName":"CustomFloatingBlockPropertiesDialogDemo","ExampleFileNames":["CustomFloatingBlockPropertiesDialogDemo_SL.csproj","App_SL.xaml","App_SL.xaml.cs","CustomFloatingBlockPropertiesDialogSL.xaml","CustomFloatingBlockPropertiesDialogSL.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MyPositionProperties.xaml","MyPositionProperties.xaml.cs","MyTextWrappingProperties.xaml","MyTextWrappingProperties.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomFloatingBlockPropertiesDialogDemo/","Description":"Custom floating block properties dialog \r\nThis example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF. The FloatingBlockProperties dialog is invoked from the context menu when clicking on an image and selecting the Text Wrapping -> More Layout Options option.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the attribute [CustomFloatingBlockPropertiesDialog].\r\n\r\n[//]:","KeyWords":"CustomFloatingBlockPropertiesDialogDemo,  replace, inherit, modify"},
{"Name":"CustomFontPropertiesDialog","ExampleInfo":{"Name":"CustomFontPropertiesDialog","DirectoryName":"CustomFontPropertiesDialog","ExampleFileNames":["CustomFontPropertiesDialog_SL.csproj","App_SL.xaml","App_SL.xaml.cs","FontPropertiesDialog.xaml","FontPropertiesDialog.xaml.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomFontPropertiesDialog/","Description":"Custom Font Properties Dialog\r\nThis example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the attribute [CustomFontPropertiesDialog].\r\n\r\n[//]:","KeyWords":"CustomFontPropertiesDialog,  replace, inherit, modify, style, styling"},
{"Name":"CustomImageEditorDialog","ExampleInfo":{"Name":"CustomImageEditorDialog","DirectoryName":"CustomImageEditorDialog","ExampleFileNames":["CustomImageEditorDialog_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MyCustomImageEditorDialog.xaml","MyCustomImageEditorDialog.xaml.cs","SampleData\\RadRichTextBox.xaml"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomImageEditorDialog/","Description":"Custom Image Editor Dialog\r\nThis example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the attribute [CustomImageEditorDialog].\r\n\r\n[//]:","KeyWords":"CustomImageEditorDialog,  replace, inherit, modify"},
{"Name":"CustomInsertHyperlinkDialog","ExampleInfo":{"Name":"CustomInsertHyperlinkDialog","DirectoryName":"CustomInsertHyperlinkDialog","ExampleFileNames":["CustomInsertHyperlinkDialog.csproj","App_SL.xaml","App_SL.xaml.cs","InsertHyperlinkDialog.xaml","InsertHyperlinkDialog.xaml.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomInsertHyperlinkDialog/","Description":"Custom Insert Hyperlink Dialog\r\nThis example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the respective attribute as [CustomInsertHyperlink].\r\n\r\n[//]:","KeyWords":"CustomInsertHyperlinkDialog,  replace, inherit, modify"},
{"Name":"CustomInsertTableDialog","ExampleInfo":{"Name":"CustomInsertTableDialog","DirectoryName":"CustomInsertTableDialog","ExampleFileNames":["CustomInsertTableDialog_SL.csproj","App_SL.xaml","App_SL.xaml.cs","CustomInsertTableDialog.xaml","CustomInsertTableDialog.xaml.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomInsertTableDialog/","Description":"Custom Insert Table Dialog\r\nThis example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the respective attribute as [CustomInsertTableDialog].\r\n\r\n[//]:","KeyWords":"CustomInsertTableDialog,  replace, inherit, modify, style, styling"},
{"Name":"CustomizeCommands","ExampleInfo":{"Name":"CustomizeCommands","DirectoryName":"CustomizeCommands","ExampleFileNames":["CustomizeCommands_SL.csproj","App_SL.xaml","App_SL.xaml.cs","TelerikEditor.xaml","TelerikEditor.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomizeCommands/","Description":"Customize Commands \r\n\r\nThis example demonstrates how you can use the CommandExecuting and CommandExecuted events to stop the execution of a command or change its default behavior. \r\nThe following customizations are shown:\r\n - The SaveCommand is cancelled and a different logic is implememted to change the default properties of the Save File dialog; \r\n - The InsertTableCommand is cancelled and tables cannot be inserted;\r\n - The PasteCommand is altered just before its execution so it only allows to paste plain text;\r\n - After executing InsertPictureCommand, the image is resized so it doesn't exceed 200px width. \r\n\r\n[//]:","KeyWords":"CustomizeCommands,  behavior, save, implement"},
{"Name":"CustomLayerAndCustomAnnotation","ExampleInfo":{"Name":"CustomLayerAndCustomAnnotation","DirectoryName":"CustomLayerAndCustomAnnotation","ExampleFileNames":["CustomLayerAndCustomAnnotation_SL.csproj","App_SL.xaml","App_SL.xaml.cs","CustomRangeEnd.cs","CustomRangeLayer.cs","CustomRangeStart.cs","CustomUILayersBuilder.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomLayerAndCustomAnnotation/","Description":"Custom Layer And Custom Annotation\nThis example demonstrates how to implement custom annotation range and vizualize it in a custom layer. The text box on the bottom of the view allows you to directly update the content of the first annotation in the document.\n\n[//]:","KeyWords":"CustomLayerAndCustomAnnotation,  replace, inherit, modify, change,visualization,appearance"},
{"Name":"CustomParagraphPropertiesDialog","ExampleInfo":{"Name":"CustomParagraphPropertiesDialog","DirectoryName":"CustomParagraphPropertiesDialog","ExampleFileNames":["CustomParagraphPropertiesDialog_SL.csproj","App_SL.xaml","App_SL.xaml.cs","CustomParagraphPropertiesDialog.xaml","CustomParagraphPropertiesDialog.xaml.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomParagraphPropertiesDialog/","Description":"Custom Paragraph Properties Dialog\r\nThis example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the respective attribute as [CustomParagraphPropertiesDialog].\r\n\r\n[//]:","KeyWords":"CustomParagraphPropertiesDialog,  replace, inherit, modify,style,styling"},
{"Name":"CustomSpellCheckingDialog","ExampleInfo":{"Name":"CustomSpellCheckingDialog","DirectoryName":"CustomSpellCheckingDialog","ExampleFileNames":["CustomSpellCheckingDialog_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs","SpellCheckingDialog.xaml","SpellCheckingDialog.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomSpellCheckingDialog/","Description":"Custom Spell Checking Dialog\nThis example illustrates how the default SpellCheckingDialog can be replaced by a custom one.\n\n[//]:","KeyWords":"CustomSpellCheckingDialog,  replace, inherit, modify"},
{"Name":"DataBinding","ExampleInfo":{"Name":"DataBinding","DirectoryName":"DataBinding","ExampleFileNames":["DataBinding_SL.csproj","App_SL.xaml","App_SL.xaml.cs","ExampleDataContext.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/DataBinding/","Description":"Data Binding\nThe current example demonstrates how you can bind the contents of RadRichTextBox to a property of your data source using the XamlDataProvider. More on format providers you can find here: http://www.telerik.com/help/wpf/radrichtextbox-features-data-providers.html.\n\n[//]:","KeyWords":"DataBinding,  xaml,docx,openxml,rtf,html,txt,text,dataprovider,bind,mvvm"},
{"Name":"DragAndDropRRTB","ExampleInfo":{"Name":"DragAndDropRRTB","DirectoryName":"DragAndDropRRTB","ExampleFileNames":["DragAndDrop_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/DragAndDropRRTB/","Description":"Drag and drop in editor \r\nThis example demonstrates the way DragAndDropManager can be used with RadRichTextBox.\r\nIn the example, when you drag items from the TreeView into the editor, they get inserted at the appropriate position in the current editor.\r\n\r\n[//]:","KeyWords":"DragAndDropRRTB,  move"},
{"Name":"GettingStarted","ExampleInfo":{"Name":"GettingStarted","DirectoryName":"GettingStarted","ExampleFileNames":["GettingStarted_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/GettingStarted/","Description":"Getting Started\nThe sample demonstrates the basic scenario where you create a document from code and edit its formatting. It also complies with the Getting Started article.\n\n[//]:","KeyWords":"GettingStarted,  raddocument,document,editor,rich,how,to"},
{"Name":"Localization","ExampleInfo":{"Name":"Localization","DirectoryName":"Localization","ExampleFileNames":["Localization_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs","RadRichTextBoxResources.Designer.cs","RadRichTextBoxResources.resx"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/Localization/","Description":"Localization\nThe example shows how RadRichTextBox along with the predefined UI of the control can be localized. The RadRichTextBoxResources file contains all localizable strings. More about the approaches for localization you can find here: http://www.telerik.com/help/silverlight/radrichtextbox-localization.html. \n\n[//]:","KeyWords":"Localization,  language"},
{"Name":"MailMerge","ExampleInfo":{"Name":"MailMerge","DirectoryName":"MailMerge","ExampleFileNames":["MailMerge_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Employee.cs","ExamplesDataContext.cs","MainPage.xaml","MainPage.xaml.cs","SampleData\\SampleDocument.xaml"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/MailMerge/","Description":"Mail Merge\nThis example illustrates the Mail Merge functionality of the control. The item source of the document contains information for the person sending the document, along with its picture.\n\n[//]:","KeyWords":"MailMerge,  mergefield,datasource,itemsource,template"},
{"Name":"MergeDocuments","ExampleInfo":{"Name":"MergeDocuments","DirectoryName":"MergeDocuments","ExampleFileNames":["MergeDocuments_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/MergeDocuments/","Description":" Merge Documents\nThis example demonstrates how multiple documents can be merged into one.\r\nAfter inserting each fragment in the merged document, the properties of the last section of the inserted piece are copied. This is done due to the fact that InsertFragment() does not copy the properties of the last section, but works as would copy/pasting do - places the caret after the inserted piece and takes the properties from the \"large\" document.","KeyWords":"MergeDocuments"},
{"Name":"PlainTextEditor","ExampleInfo":{"Name":"PlainTextEditor","DirectoryName":"PlainTextEditor","ExampleFileNames":["PlainTextEditor_SL.csproj","App_SL.xaml","App_SL.xaml.cs","CustomMenuBuilder.cs","MainPage.xaml","MainPage.xaml.cs","RadMenuItemFactory.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/PlainTextEditor/","Description":"Plain Text Editor\nThe example demonstrates how to disable all rich-text editing capabilities and use RadRichTextBox as plain text editor.\n\n[//]:","KeyWords":"PlainTextEditor,  disable,rich,text,edit"},
{"Name":"PrintPreview","ExampleInfo":{"Name":"PrintPreview","DirectoryName":"PrintPreview","ExampleFileNames":["PrintPreviewUsingRichTextBox_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/PrintPreview/","Description":" Print Preview\nThis example demonstrates how to implement Print Preview functionality using RadRichTextBox.","KeyWords":"PrintPreview"},
{"Name":"RadToolBarUI","ExampleInfo":{"Name":"RadToolBarUI","DirectoryName":"RadToolBarUI","ExampleFileNames":["RadToolBarUI_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/RadToolBarUI/","Description":"  RadToolBar UI \r\nThis example shows how RadToolBar can be used instead of the default RadRichTextBoxRibbonUI in order to achieve a simpler overall look. ","KeyWords":"RadToolBarUI"},
{"Name":"SearchAndHighlight","ExampleInfo":{"Name":"SearchAndHighlight","DirectoryName":"SearchAndHighlight","ExampleFileNames":["SearchAndHighlight_SL.csproj","App_SL.xaml","App_SL.xaml.cs","HighlighSearchedPhraseUILayersBuilder.cs","HighlightSearchedWordLayer.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/SearchAndHighlight/","Description":"Search And Highlight\nThis example demonstrates how the search and position functionality can be used to create a custom UI layer that highlights all occurrences of the searched text.\n\n[//]:","KeyWords":"SearchAndHighlight,  custom,ui,layer,position,document,text"},
{"Name":"SimulateWatermark","ExampleInfo":{"Name":"SimulateWatermark","DirectoryName":"SimulateWatermark","ExampleFileNames":["SimulateWatermark_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs","WatermarkRadRichTextBox.xaml","WatermarkRadRichTextBox.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/SimulateWatermark/","Description":"Simulate Watermark\nThis example demonstrates how you can strip the rich-text formatting options of RadRichTextBox and place text in it when the control is empty (similar to RadWatermarkTextBox).\n\n[//]:","KeyWords":"SimulateWatermark,  strip,rich,text"},
{"Name":"TelerikEditor","ExampleInfo":{"Name":"TelerikEditor","DirectoryName":"TelerikEditor","ExampleFileNames":["TelerikEditorDemo_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs","TelerikEditor_SL.xaml","TelerikEditor_SL.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/TelerikEditor/","Description":"Telerik Editor\nThis example demonstrates how the commands can be wired with RadRichTextBoxRibbonUI in order to be able to utilize all of the functionality of the control through a well-known user interface.\n\n[//]:","KeyWords":"TelerikEditor,  commands,ribbon,ui"},
{"Name":"Watermark","ExampleInfo":{"Name":"Watermark","DirectoryName":"Watermark","ExampleFileNames":["Watermark_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs","TelerikEditor_SL.xaml","TelerikEditor_SL.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/Watermark/","Description":" Watermark\nThe example demonstrates how to create and apply a watermark from code.","KeyWords":"Watermark"},
{"Name":"WorkingWithRadDocumentEditor","ExampleInfo":{"Name":"WorkingWithRadDocumentEditor","DirectoryName":"WorkingWithRadDocumentEditor","ExampleFileNames":["WorkingWithRadDocumentEditor_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/WorkingWithRadDocumentEditor/","Description":"Working With Rad Document Editor\r\nWorking with RadDocumentEditor\r\nThis example demonstrates how to use RadDocumentEditor's API to create a document containing header, footer, numbered list, image, field and table of contents.\r\n\r\n[//]:","KeyWords":"WorkingWithRadDocumentEditor,  api,manipulate,editing,header, footer, numbered, list, image, field,table of contents,toc"}]