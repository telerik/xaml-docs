[{"Name":"AddNewItemsWithButton","ExampleInfo":{"Name":"AddNewItemsWithButton","DirectoryName":"AddNewItemsWithButton","ExampleFileNames":["AddNewItemsWithButton_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Country.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md","SearchTextToBoolConverter.cs","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/AddNewItemsWithButton/","Description":"Add New Items With Button\nThis example demonstrates how to add new Items to the ItemsSource collection of the control with the use of a simple Button.\n\n[//]:","KeyWords":"AddNewItemsWithButton, itemssource, collection"},
{"Name":"AsynchronousFiltering","ExampleInfo":{"Name":"AsynchronousFiltering","DirectoryName":"AsynchronousFiltering","ExampleFileNames":["AsynchronousFiltering_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md","ViewModels\\Item.cs","ViewModels\\MainViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/AsynchronousFiltering/","Description":"How to enable asynchronous Filtering\r\nThis example demonstrates how to enable the RadAutoCompleteBox control's asynchronous FilteringBehavior. For demonstration the left RadAutoCompleteBox uses the normal FilteringBehavior and the right RadAutoCompleteBox uses the AsyncFilteringBehavior. Notice the delayed filtering of the asynchronous behavior. Both controls are bound to a collection of 100000 similar items. This behavior is designed to work with a big source set to the ItemsSource of the control.\r\n\r\n[//]:","KeyWords":"AsynchronousFiltering, delay, itemssource, asyncfilteringbehavior"},
{"Name":"CustomBoxesItemTemplate","ExampleInfo":{"Name":"CustomBoxesItemTemplate","DirectoryName":"CustomBoxesItemTemplate","ExampleFileNames":["CustomBoxesItemTemplate_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Continent.cs","ContinentToColorConverter.cs","Country.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/CustomBoxesItemTemplate/","Description":"Custom BoxesItemTemplate\r\nThis example demonstrates how to create a custom BoxesItemTemplate for RadAutoCompleteBox control in Silverlight and WPF.\r\n\r\n[//]:","KeyWords":"CustomBoxesItemTemplate, customization"},
{"Name":"CustomDropDownItemTemplate","ExampleInfo":{"Name":"CustomDropDownItemTemplate","DirectoryName":"CustomDropDownItemTemplate","ExampleFileNames":["CustomDropDownItemTemplate_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Country.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/CustomDropDownItemTemplate/","Description":"Custom Drop Down Item Template\nThis example demonstrates how to create a custom DropDownItemTemplate for the RadAutoCompleteBox control in Silverlight and WPF.\n\n[//]:","KeyWords":"CustomDropDownItemTemplate, dropdownitemtemplate, customization"},
{"Name":"CustomHighlightBehavior","ExampleInfo":{"Name":"CustomHighlightBehavior","DirectoryName":"CustomHighlightBehavior","ExampleFileNames":["CustomHighlightBehavior_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Example.xaml","Example.xaml.cs","Item.cs","MainPage.xaml","MainPage.xaml.cs","MyHighlightBehavior.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/CustomHighlightBehavior/","Description":"Custom HighlightBehavior\r\nThis example demonstrates how to implement a custom HighlightBehavior which is always highlighting the last of the matching items unless there is an exact match.\r\n\r\n[//]:","KeyWords":"CustomHighlightBehavior, highlighting, match"},
{"Name":"DataValidation","ExampleInfo":{"Name":"DataValidation","DirectoryName":"DataValidation","ExampleFileNames":["DataValidation_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Employee.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Team.cs","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/DataValidation/","Description":"DataValidation\r\nThis example demonstrates how to easily implement a validation for RadAutoCompleteBox using the IDataErrorInfo interface.\r\n\r\n[//]:","KeyWords":"DataValidation, validation, idataerrorinfo, interface"},
{"Name":"HighlightMatchingItemsText_SL","ExampleInfo":{"Name":"HighlightMatchingItemsText_SL","DirectoryName":"HighlightMatchingItemsText_SL","ExampleFileNames":["HighlightMatchingItemsText_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Country.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md","TextBlockWithHighlight.cs","ViewModel.cs","Themes\\Generic.xaml"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/HighlightMatchingItemsText_SL/","Description":"  Highlight Matching Items Text \r\nThis example demonstrates how to achieve highlighting of the matched items text in the RadAutoCompleteBox control's drop down portion.","KeyWords":"HighlightMatchingItemsText_SL"},
{"Name":"MinimumInputPrefixLengthBeforeFiltering","ExampleInfo":{"Name":"MinimumInputPrefixLengthBeforeFiltering","DirectoryName":"MinimumInputPrefixLengthBeforeFiltering","ExampleFileNames":["MinimumInputPrefixLengthBeforeFiltering_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Country.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MinimumInputFilteringBehavior.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/MinimumInputPrefixLengthBeforeFiltering/","Description":"Minimum Input Prefix Length Before Filtering\r\nThis example demonstrates how to set a minimum length for the search text that needs to be entered before the items of RadAutoCompleteBox get filtered.\r\n\r\n[//]:","KeyWords":"MinimumInputPrefixLengthBeforeFiltering, search, text, filter"},
{"Name":"MinimumPopulateDelay","ExampleInfo":{"Name":"MinimumPopulateDelay","DirectoryName":"MinimumPopulateDelay","ExampleFileNames":["MinimumPopulateDelay_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Item.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/MinimumPopulateDelay/","Description":"MinimumPopulateDelay example\r\nThis example demonstrates how to implement minimum delay before the built-in filtering of the control is triggered. For better user experience a RadBusyIndicator is added in order to give feedback that the delay is triggered and is running.\r\nWhen deleting the inputted text by pressing the 'Backspace' keyboard key the DropDown of the control is immediately closed and the populating (filtering) is terminated. In those scenarios if a populate (filtering) with the current SearchText should be triggered all that is needed is for the 'Enter' keyboard key to be pressed.\r\n\r\n[//]:","KeyWords":"MinimumPopulateDelay, filtering, delete, busyindicator, text, input, backspace, populate, enter"},
{"Name":"MultiColorBoxesItems","ExampleInfo":{"Name":"MultiColorBoxesItems","DirectoryName":"MultiColorBoxesItems","ExampleFileNames":["DifferentlyColoredSelectedBoxes_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Example.xaml","Example.xaml.cs","Item.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/MultiColorBoxesItems/","Description":"Differently colored selected boxes example\r\nThis example demonstrates how to achieve different appearance of the selected AuctoCompleteItems using BoxesItemTemplate property and RadAutoCompleteBoxItem style.\r\n\r\n[//]:","KeyWords":"MultiColorBoxesItems, appearance, boxesitemtemplate, style, itemtemplate"},
{"Name":"NoMatchFilteringBehavior","ExampleInfo":{"Name":"NoMatchFilteringBehavior","DirectoryName":"NoMatchFilteringBehavior","ExampleFileNames":["NoMatchFilteringBehavior_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Country.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MyCustomFilteringBehavior.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/NoMatchFilteringBehavior/","Description":"No Match Filtering Behavior\r\nThis example demonstrates how to customize the FilteringBehavior of the cotnrol for Silverlight and WPF.\r\n\r\nWith the custom filtering behavior if the control has the focus or there isn't a matched item when typing in the control \r\nthe drop down portion of the control will be populated with the entire ItemsSource collection. Try typing in for example \r\n'London', the drop down will be populated no matter that there isn't a matched item.\r\n\r\n[//]:","KeyWords":"NoMatchFilteringBehavior, customize, custom, drop, down, populated, itemssource"},
{"Name":"OpenWithDropDownButton","ExampleInfo":{"Name":"OpenWithDropDownButton","DirectoryName":"OpenWithDropDownButton","ExampleFileNames":["OpenWithDropDownButton_SL.csproj","App_SL.xaml","App_SL.xaml.cs","EmptyTextFilteringBehavior.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/OpenWithDropDownButton/","Description":"Open With Drop Down Button\nThis example demonstrates how to create a button that will populate the drop down portion of the RadAutoCompleteBox control for Silverlight and WPF.\n\n[//]:","KeyWords":"OpenWithDropDownButton, populate"},
{"Name":"RestrictInputToOnlyExistingItems","ExampleInfo":{"Name":"RestrictInputToOnlyExistingItems","DirectoryName":"RestrictInputToOnlyExistingItems","ExampleFileNames":["RestrictInputToOnlyExistingItems_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Country.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md","RestrictInputHelper.cs","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/RestrictInputToOnlyExistingItems/","Description":"Restrict Input To Only Existing Items\r\nThis example demonstrates how to restrict the input of the user to only the existing items inside the ItemsSource of RadAutoCompleteBox.\r\n\r\nFor Silverlight: The Silverlight application needs to be trusted and you need to enable trusted applications to run inside the browser. This needs be done in order to import the WinAPI function 'GetKeyState' - it is used to find if the 'Caps Lock' key is pressed. If the application is not trusted the attached behavior won't work. Please, follow the next steps:\r\n\r\n1. Sign the .XAP file of the Silverlight application with code signing certificate. Right click on the Silverlight application and go to Properties. Choose �Signing' from the left hand side and check the checkbox 'Sign the .XAP file'.\r\n2. Click on the button 'Create Test Certificate'. Enter the password and confirm password and click the 'OK' button.\r\n3. Click on the 'More Details' button highlighted - this will show you a 'Certificate' window and click the 'Install Certificate' button.\r\n4. Clicking on the button brings up the 'Certificate Import wizard'. Click on the 'Next' button and choose 'Place all certificates in the following store'. Click on the Browse button. This will show you a 'Certificate Store'. Choose 'Trusted Publisher' and finish the wizard. Now repeat the same step to install this certificate in 'Trusted Root Certification Authorities'.\r\n\r\nFor a more detailed information how to enable Trusted Applications to run inside the browser, please check the following article from MSDN:\r\nhttps://msdn.microsoft.com/en-us/library/gg192793(v=vs.95)\r\n\r\n[//]:","KeyWords":"RestrictInputToOnlyExistingItems, itemssource, trusted, xap, signing"},
{"Name":"SingleSelectionModeWithClearButton","ExampleInfo":{"Name":"SingleSelectionModeWithClearButton","DirectoryName":"SingleSelectionModeWithClearButton","ExampleFileNames":["SingleSelectionModeWithClearButton_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Country.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MyViewModel.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/SingleSelectionModeWithClearButton/","Description":"Single SelectionMode with clear button\r\nThis example demonstates how to add a button that clears the current SelectedItem in Single SelectionMode.\r\n\r\n[//]:","KeyWords":"SingleSelectionModeWithClearButton, selecteditem"},
{"Name":"TwoPropertiesFilteringBehavior","ExampleInfo":{"Name":"TwoPropertiesFilteringBehavior","DirectoryName":"TwoPropertiesFilteringBehavior","ExampleFileNames":["TwoPropertiesFilteringBehavior_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Country.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MyFilteringBehavior.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/TwoPropertiesFilteringBehavior/","Description":"Two Properties Filtering Behavior\r\nThis example demonstrates how to customize the FilteringBehavior of the control for Silverlight and WPF.\r\n\r\nFor example type U (for United States) then ',' and then W (for Washington, D.C.), this will generate \r\nUnites States in the drop down portion of the control.\r\n\r\n[//]:","KeyWords":"TwoPropertiesFilteringBehavior, customize"},
{"Name":"WithDataForm","ExampleInfo":{"Name":"WithDataForm","DirectoryName":"WithDataForm","ExampleFileNames":["WithDataForm_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Country.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Person.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/WithDataForm/","Description":"With DataForm\r\nThis example demonstrates how to use RadAutoCompleteBox inside RadDataForm by creating a custom ReadOnlyTemplate, EditTemplate\r\nand NewItemTemplate for Silverlight and WPF.\r\n\r\n[//]:","KeyWords":"WithDataForm, custom, readonlytemplate, edittemplate, itemtemplate"},
{"Name":"WithGridView","ExampleInfo":{"Name":"WithGridView","DirectoryName":"WithGridView","ExampleFileNames":["WithGridView_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Country.cs","Employe.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/AutoCompleteBox/WithGridView/","Description":"With GridView\r\nThis example shows how to add RadAutoCompleteBox inside GridViewDataColumn for Silverlight and WPF.\r\n\r\nThe 'Country' column in the RadGridView uses the AutoCompleteBox control.\"\r\n\r\n[//]:","KeyWords":"WithGridView, gridviewdatacolumn"}]