[{"Name":"AutoGeneratedTag","ExampleInfo":{"Name":"AutoGeneratedTag","DirectoryName":"AutoGeneratedTag","ExampleFileNames":["AutoGeneratedTag_WPF.csproj","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","LayoutData.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/AutoGeneratedTag/","Description":"Auto Generated Tag\r\nThis example demonstrates how to mark SplitContainers and PaneGroups as auto-generated. In that way the Docking control will clean them once they are not needed, i.e. when there is nothing inside them, which can be used later. Only the RadSplitContainers and RadPaneGroups can have this property set. All the children of a SplitContainer should be marked as auto-generated in order it to be cleaned up by the Docking control. \r\n\r\nThe example shows how to set this property in XAML and in code to the dynamically generated RadPanes. The saving of the layout in xml file demonstrates easier how the elements are removed if they are auto-generated.\r\n\r\n[//]:","KeyWords":"AutoGeneratedTag, splitcontainer, dynamically, radpanes, cleaned, docking"},
{"Name":"ClickFlyoutBehaviorWithAnimation","ExampleInfo":{"Name":"ClickFlyoutBehaviorWithAnimation","DirectoryName":"ClickFlyoutBehaviorWithAnimation","ExampleFileNames":["ClickFlyoutBehaviorWithAnimation_WPF.csproj","AnimatedFlyoutBehavior.cs","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/ClickFlyoutBehaviorWithAnimation/","Description":"Click Flyout Behavior With Animation\nThis example demonstrates how to create a custom FlyoutBehavior for the RadDocking control in order to achieve a ClickFlyoutBehavior with slide in/out animations. The example is available for both Silverlight and WPF.\n\n[//]:","KeyWords":"ClickFlyoutBehaviorWithAnimation, custom, animations, docking"},
{"Name":"CloseSinglePaneInToolWindow","ExampleInfo":{"Name":"CloseSinglePaneInToolWindow","DirectoryName":"CloseSinglePaneInToolWindow","ExampleFileNames":["CloseSinglePaneInToolWindow_WPF.csproj","App.xaml","App.xaml.cs","CustomItemsFactory.cs","CustomToolWindow.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/CloseSinglePaneInToolWindow/","Description":"Close Single Pane In Tool Window\nThis example demonstrates how to create a custom ItemsFactory and ToolWindow in order to customize the way the Close button of the floating ToolWindow closes Panes when there are multiple Panes in the PaneGroup for Silverllight and WPF.\r\n\r\nThe example shows how to achieve a behavior, where the close button closes only the current \r\nactive Pane rather than the hole PaneGroup.\r\n\r\n[//]:","KeyWords":"CloseSinglePaneInToolWindow, custom, itemsfactory, floating, multiple, behavior, docking"},
{"Name":"CompassProgramming","ExampleInfo":{"Name":"CompassProgramming","DirectoryName":"CompassProgramming","ExampleFileNames":["CompassProgramming_WPF.csproj","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","PaneType.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/CompassProgramming/","Description":"Compass Programming\nThis example demonstrates how to customize which compasses are shown when dragging different RadPanes in the control.\r\n\r\nWhen dragging a \"Green\" RadPane only the center compass over other \"Green\" RadPanes is shown and all of the root compasses.\r\nWhen dragging a \"Purple\" RadPane all of the compasses (right, left, top, bottom and center) over other \"Purple\" RadPanes are shown and none of the root compasses.\r\n\r\nMore details could be found in our online help:\r\nFor WPF - http://www.telerik.com/help/wpf/raddocking-how-to-implement-conditional-docking.html\r\nFor Silverlight - http://www.telerik.com/help/silverlight/raddocking-how-to-implement-conditional-docking.html\r\n\r\n[//]:","KeyWords":"CompassProgramming, customize, dragging, radpane, root, docking"},
{"Name":"CustomDockingPanesFactory","ExampleInfo":{"Name":"CustomDockingPanesFactory","DirectoryName":"CustomDockingPanesFactory","ExampleFileNames":["CustomDockingPanesFactory_WPF.csproj","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","MyDockingPanesFactory.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/CustomDockingPanesFactory/","Description":"Custom DockingPanesFactory\r\nThis example demonstrates how to use a custom DockingPanesFactory in order to add the RadPanes from the PanesSource collection to a predefined empty RadPaneGroups in the control. The example also demonstrates how to permanently remove a RadPane instance when its 'X' close button is pressed.\r\n\r\n[//]:","KeyWords":"CustomDockingPanesFactory, panesource, predefined, remove, permanently, close"},
{"Name":"DifferentToolWindowStyles","ExampleInfo":{"Name":"DifferentToolWindowStyles","DirectoryName":"DifferentToolWindowStyles","ExampleFileNames":["DifferentToolWindowStyles_WPF.csproj","App.config","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/DifferentToolWindowStyles/","Description":"Specific ToolWindow Styles based on RadPane 'tag'\r\nThis example demonstrates how to set different Style to the auto generated ToolWindow instance when a RadPane or a RadPaneGroup is made floating.\r\n\r\n[//]:","KeyWords":"DifferentToolWindowStyles, auto, generated, floating, docking"},
{"Name":"DockingInsideWinForms","ExampleInfo":{"Name":"DockingInsideWinForms","DirectoryName":"DockingInsideWinForms","ExampleFileNames":["DockingInsideWinForms.csproj","DockingControl.xaml","DockingControl.xaml.cs","Form1.cs","Form1.Designer.cs","Form1.resx","Program.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/DockingInsideWinForms/","Description":"Docking Inside Win Forms\r\nThis example illustrates how to work-around an exception thrown when dragging a Pane.\r\nThe issue is caused because the Application.Current is Specific for WPF Application.\r\nTherefore when using WPF controls in WinForms Application it needs to be initialized an instance of WPF Application. This shoud be done in the WinForms Application.\r\n\r\n[//]:","KeyWords":"DockingInsideWinForms, dragging, application, current, wpf, winforms"},
{"Name":"DockingPrism7","ExampleInfo":{"Name":"DockingPrism7","DirectoryName":"DockingPrism7","ExampleFileNames":["DockingPrism7.csproj","app.config","App.xaml","App.xaml.cs","CustomDockingPanesFactory.cs","IPaneModel.cs","Readme.md","PrismRelatedFiles\\ClosePaneAction.cs","PrismRelatedFiles\\DockingActivePaneSyncBehavior.cs","PrismRelatedFiles\\DockingRegionAdapter.cs","ViewModels\\AdditionalViewModel.cs","ViewModels\\BrowseViewModel.cs","ViewModels\\IncomingViewModel.cs","ViewModels\\OutgoingViewModel.cs","ViewModels\\SentViewModel.cs","ViewModels\\ShellViewModel.cs","ViewModels\\ViewModelBase.cs","Views\\AdditionalView.xaml","Views\\AdditionalView.xaml.cs","Views\\BrowseView.xaml","Views\\BrowseView.xaml.cs","Views\\IncomingView.xaml","Views\\IncomingView.xaml.cs","Views\\OutgoingView.xaml","Views\\OutgoingView.xaml.cs","Views\\SentView.xaml","Views\\SentView.xaml.cs","Views\\ShellView.xaml","Views\\ShellView.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/DockingPrism7/","Description":"Docking with Prism 7\r\nThis example shows how to setup the RadDocking using PRISM 7. Here are the covered scenarios \r\n - Using the RadWindow as a MainWindow with Prism 7 \r\n - CustomRegionBehavior which helps with the activation of the panes\r\n - Adding new panes at runtime\r\n - Removing the corresponding region when a pane is removed\r\n\r\n[//]:","KeyWords":"DockingPrism7, docking, mvvm, customregionadapter, customregionbehavior, activation, runtime"},
{"Name":"FloatingPaneTaskbarIcons","ExampleInfo":{"Name":"FloatingPaneTaskbarIcons","DirectoryName":"FloatingPaneTaskbarIcons","ExampleFileNames":["FloatingPaneTaskbarIcons_WPF.csproj","App.xaml","App.xaml.cs","CustomDefaultGeneratedItemsFactory.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","PaneType.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/FloatingPaneTaskbarIcons/","Description":"Floating Panes taskbar icons\r\nThis example demonstrates how to show the floating Panes in the taskbar and set a default icon or a specific icon for specific Panes.\r\n\r\n[//]:","KeyWords":"FloatingPaneTaskbarIcons, default, show, docking"},
{"Name":"MDILayout","ExampleInfo":{"Name":"MDILayout","DirectoryName":"MDILayout","ExampleFileNames":["MDILayout_WPF.csproj","App.config","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ViewModel.cs","WindowViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/MDILayout/","Description":"MDI Layout\r\nThis example demonstrates how to achieve MDI layout with the Docking control.\r\n\r\n[//]:","KeyWords":"MDILayout, docking"},
{"Name":"NestedDockingSaveLoadLayout","ExampleInfo":{"Name":"NestedDockingSaveLoadLayout","DirectoryName":"NestedDockingSaveLoadLayout","ExampleFileNames":["NestedDockingSaveLoadLayout_WPF.csproj","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/NestedDockingSaveLoadLayout/","Description":"Nested RadDocking Save and Load of layout\r\nThis example demonstrates how to save and load the layout in nested RadDocking scenarios. The approved mechanism is to save/load each controls layout separately but simultaneously.\r\n\r\n[//]:","KeyWords":"NestedDockingSaveLoadLayout, separately, simultaneously"},
{"Name":"NestedDockingWithPanesSource","ExampleInfo":{"Name":"NestedDockingWithPanesSource","DirectoryName":"NestedDockingWithPanesSource","ExampleFileNames":["NestedDockingWithPanesSource_WPF.csproj","App.xaml","App.xaml.cs","CustomDockingPanesFactory.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/NestedDockingWithPanesSource/","Description":"How to use PanesSource in nested RadDocking scenarios\r\nThis example demonstrates how the PanesSource collection could be used in nested RadDocking scnearios.\r\n\r\n[//]:","KeyWords":"NestedDockingWithPanesSource, demonstrates, panesource"},
{"Name":"OpenClosedPanesWithContextMenu","ExampleInfo":{"Name":"OpenClosedPanesWithContextMenu","DirectoryName":"OpenClosedPanesWithContextMenu","ExampleFileNames":["OpenClosedPanesWithContextMenu_WPF.csproj","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/OpenClosedPanesWithContextMenu/","Description":"Open Closed Panes With Context Menu\nThis example demonstrates how to show the closed RadPanes when you close them by their close button also shows how to permanently close a RadPane for Silverlight and WPF.\n\n[//]:","KeyWords":"OpenClosedPanesWithContextMenu, docking, show, permanently, button"},
{"Name":"OrderedUnpinnedPanes","ExampleInfo":{"Name":"OrderedUnpinnedPanes","DirectoryName":"OrderedUnpinnedPanes","ExampleFileNames":["OrderedUnpinnedPanes_WPF.csproj","App.config","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/OrderedUnpinnedPanes/","Description":"Ordered Unpinned Panes\nThe example demonstrates how to keep the unpinned RadPanes ordered the way they were defined in XAML while pining/unpinning them at run-time.\n\n[//]:","KeyWords":"OrderedUnpinnedPanes, docking, keep, pinning, pin, run, time"},
{"Name":"PaneGroupItemsSource","ExampleInfo":{"Name":"PaneGroupItemsSource","DirectoryName":"PaneGroupItemsSource","ExampleFileNames":["PaneGroupItemsSource_WPF.csproj","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","PaneGroupExtensions.cs","PaneModel.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/PaneGroupItemsSource/","Description":"Pane Group Items Source\nIMPORTANT:\r\n\r\nWith our Q3 2013 SP release of RadDocking there is a new functionality for achieving MVVM scenarios that require an equivalent of ItemsSource with the addition of PanesSource. More details about the PanesSource feature can be found here:\r\nFor WPF: http://www.telerik.com/help/wpf/raddocking-features-panes-panesource.html\r\nFor SL: http://www.telerik.com/help/silverlight/raddocking-features-panes-panesource.html\r\n\r\nThe example demonstrates how to extend the functionality of RadDocking with the use of Attached Properties in order to \r\nset a collection of Panes as ItemsSource of a specific PaneGroup for Silverlight and WPF.\r\n\r\nFor more detailed infroamtion could be found in this blog post: \r\nhttp://blogs.telerik.com/xamlteam/posts/13-01-14/extending-the-functionality-of-radcontrols-with-attached-properties\r\n\r\n[//]:","KeyWords":"PaneGroupItemsSource, docking, mvvm, panessource, extend, attached, property"},
{"Name":"PaneSourceWithLayout","ExampleInfo":{"Name":"PaneSourceWithLayout","DirectoryName":"PaneSourceWithLayout","ExampleFileNames":["PaneSourceWithLayout_WPF.csproj","App.xaml","App.xaml.cs","CustomDockingPanesFactory.cs","MainWindow.xaml","MainWindow.xaml.cs","PaneViewModel.cs","Readme.md","SDK icon.ico","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/PaneSourceWithLayout/","Description":"Save/Load layout with PaneSource\r\nThis examples demonstrates how to handle scenarios where the layout of the RadDocking is loaded and there is a PaneSource collection set. In this scenario if the saved layout matches the PaneSource collection no conflicts are found and all is well, but if the bound collection contains more instances of RadPanes, then the saved in the layout XML the additional RadPane instance in the PanesSource collection will be disregarded. This is an expected behavior that needs to be handled.\r\n\r\n[//]:","KeyWords":"PaneSourceWithLayout, docking, loaded, collection"},
{"Name":"PartialSaveLoadLayout","ExampleInfo":{"Name":"PartialSaveLoadLayout","DirectoryName":"PartialSaveLoadLayout","ExampleFileNames":["PartialSaveLoadLayout_WPF.csproj","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","Scope.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/PartialSaveLoadLayout/","Description":"Save/Load a part of RadDocking layout\r\nThis example demonstrates how to save/load only one part of the RadDocking layout. Using the ElementLayoutSaving event we cancel the saving of the undesired elements.\r\nWith the ElementLayoutCleaning event we cancel the cleaning of all elements that weren't saved in the ElementLayoutSaving event handler.\r\n\r\n[//]:","KeyWords":"PartialSaveLoadLayout, docking, partial, persist, cancel, serializationtag"},
{"Name":"RestoreFocusOnStateChanged","ExampleInfo":{"Name":"RestoreFocusOnStateChanged","DirectoryName":"RestoreFocusOnStateChanged","ExampleFileNames":["RestoreFocusOnStateChanged_WPF.csproj","App.xaml","App.xaml.cs","CustomGeneratedItemsFactory_WPF.cs","CustomToolWindow_WPF.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/RestoreFocusOnStateChanged/","Description":"Restore focus to floating Pane content\r\nThis example demonstrates how to restore the keyboard focus to the last focused element in the RadPane when it is made floating. Click in one of the TextBox controls and then make that RadPane floating by dragging it by its header.\r\n\r\n[//]:","KeyWords":"RestoreFocusOnStateChanged, docking, keyboard"},
{"Name":"RetainPaneSize","ExampleInfo":{"Name":"RetainPaneSize","DirectoryName":"RetainPaneSize","ExampleFileNames":["RetainPaneSize_WPF.csproj","App.config","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/RetainPaneSize/","Description":"Retain Pane Size\r\nThis example demonstrates how to retain the size of the Pane using the new RetainPaneSizeMode property of RadDocking.\r\n\r\n[//]:","KeyWords":"RetainPaneSize, docking, retainpanesizemode"},
{"Name":"SaveLoadLayout","ExampleInfo":{"Name":"SaveLoadLayout","DirectoryName":"SaveLoadLayout","ExampleFileNames":["SaveLoadLayout_WPF.csproj","App.xaml","App.xaml.cs","LayoutDataViewModel.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/SaveLoadLayout/","Description":"Save Load Layout\nThis example demonstrates how the Save/Load layout functionality work in the RadDocking control. \r\nIf a Panes content/properties needs to be persisted when the layout is saved setting the \r\nSerializationTag is required. In order to exclude a Pane from the Save layout functionality \r\nsetting the ExcludedFromLayoutSave is required.\r\n\r\n[//]:","KeyWords":"SaveLoadLayout, docking, content, properties, persist, serializationtag, exclude, excludedfromlayoutsave"},
{"Name":"ShellPrism","ExampleInfo":{"Name":"ShellPrism","DirectoryName":"ShellPrism","ExampleFileNames":["ShellPrism_WPF.csproj","App.xaml","App.xaml.cs","DockActivationRegionBehavior.cs","DockingRegionAdapter.cs","FileServicesModule.cs","IPaneModel.cs","PRISMSaveLoadLayoutHelper.cs","Readme.md","ShellBootstrapper.cs","ShellDockingPanesFactory.cs","ShellWindow.xaml","ShellWindow.xaml.cs","Events\\ActivateViewEvent.cs","Events\\CreateDocumentEvent.cs","Events\\LoadLayoutEvent.cs","Events\\SaveLayoutEvent.cs","Menu\\MenuItemActivatePane.xaml","Menu\\MenuItemActivatePane.xaml.cs","Menu\\MenuItemLoad.xaml","Menu\\MenuItemLoad.xaml.cs","Menu\\MenuItemNew.xaml","Menu\\MenuItemNew.xaml.cs","Menu\\MenuItemSave.xaml","Menu\\MenuItemSave.xaml.cs","Views\\ErrorList.xaml","Views\\ErrorList.xaml.cs","Views\\NewDocument.xaml","Views\\NewDocument.xaml.cs","Views\\Output.xaml","Views\\Output.xaml.cs","Views\\PropertiesView.xaml","Views\\PropertiesView.xaml.cs","Views\\ServerExplorer.xaml","Views\\ServerExplorer.xaml.cs","Views\\SolutionExplorer.xaml","Views\\SolutionExplorer.xaml.cs","Views\\ToolBox.xaml","Views\\ToolBox.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/ShellPrism/","Description":"PRISM Implementation with MEF\r\nThis example shows how to implement the main functionality of RadDocking using PRISM and MEF. Here are the covered scenarios\r\n - MEF\r\n - MVVM\r\n - CustomRegionAdapter\r\n - CustomRegionBehavior which helps Avtivation implementation\r\n - Activation\r\n - Custom Event aggregators\r\n - Predefined docking layout at start up\r\n - Save and Load docking layout on application start up and exit\r\n - Adding new documents at runtime\r\n\r\n[//]:","KeyWords":"ShellPrism, docking, mvvm, customregionadapter, customregionbehavior, activation, aggregators, predefined, save, load, runtime"},
{"Name":"SplitContainerDockState","ExampleInfo":{"Name":"SplitContainerDockState","DirectoryName":"SplitContainerDockState","ExampleFileNames":["SplitContainerDockState_WPF.csproj","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/SplitContainerDockState/","Description":"How to get the SplitContainer's DockState\r\nThis example demonstrates how to get the DockState of a SplitContainer. The DockState is an enumeration that represents the state of a SplitContainer compared to the root of the RadDocking.\r\n\r\n[//]:","KeyWords":"SplitContainerDockState, docking, root"},
{"Name":"VisualStudioDocking","ExampleInfo":{"Name":"VisualStudioDocking","DirectoryName":"VisualStudioDocking","ExampleFileNames":["VisualStudioDocking_WPF.csproj","App.config","App.xaml","App.xaml.cs","CustomDockingPanesFactory.cs","CustomSaveLoadLayoutHelper.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","View\\ErrorList.xaml","View\\ErrorList.xaml.cs","View\\Output.xaml","View\\Output.xaml.cs","View\\PropertiesPane.xaml","View\\PropertiesPane.xaml.cs","View\\ServerExplorer.xaml","View\\ServerExplorer.xaml.cs","View\\SolutionExplorer.xaml","View\\SolutionExplorer.xaml.cs","View\\ToolBox.xaml","View\\ToolBox.xaml.cs","ViewModel\\MainWindowViewModel_WPF.cs","ViewModel\\PaneViewModel_WPF.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/VisualStudioDocking/","Description":"Visual Studio Implementation with MVVM\r\nThis example shows how to implement the main functionality of RadDocking using MVVM in VS-like scenarios. Here are the covered points:\r\n - MVVM\r\n - Activation\r\n - Predefined docking layout at start up\r\n - Save and Load docking layout on application start up and exit\r\n - Adding new documents at runtime\r\n - Custom Compass logic\r\n\r\n[//]:","KeyWords":"VisualStudioDocking, vs, activation, predefined, save, load, layout, compass"},
{"Name":"WinFormsInsideDocking","ExampleInfo":{"Name":"WinFormsInsideDocking","DirectoryName":"WinFormsInsideDocking","ExampleFileNames":["WinFormsInsideDocking_WPF.csproj","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","NonTrasparentWindowsGeneratedItemsFactory.cs","Readme.md","WinFormsUserControl.cs","WinFormsUserControl.designer.cs","WinFormsUserControl.resx"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/WinFormsInsideDocking/","Description":"Win Forms Inside Docking\nThis example illustrates how to work-around the airspace problem of WPF and WinForms working together. More information about the problem you could find here: http://msdn.microsoft.com/en-us/library/aa970688.aspx\r\nIn order to be work-arounded all Popups, including the Windows, should have AllowTransparency property set to False.\r\nThis leads to some glitches in the Docking control, which fixes are provided in the project.\r\n\r\nIn order to trigger ActivePaneChanged and set properly ActivePane for the RadDocking when clicking on WinForms control, you should handle MouseDown WinForms event.\r\n\r\nTo work arond the problem with the AutoHide are a ClickFlyoutBehavior should be set to the Docking control.\r\n\r\n[//]:","KeyWords":"WinFormsInsideDocking, wpf, popup, windows, allowtransparency, glitches, activepanechanged, activepane, mousedown, autohide, clickflyoutbehavior"}]