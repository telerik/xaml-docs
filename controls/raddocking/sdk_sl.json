[{"Name":"Auto Generated Tag","ExampleInfo":{"Name":"Auto Generated Tag","DirectoryName":"AutoGeneratedTag","ExampleFileNames":["AutoGeneratedTag_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Example.xaml","Example.xaml.cs","LayoutData.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/AutoGeneratedTag/","Description":"This example demonstrates how to mark SplitContainers and PaneGroups as auto-generated. In that way the Docking control will clean them once they are not needed, i.e. when there is nothing inside them, which can be used later. Only the RadSplitContainers and RadPaneGroups can have this property set. All the children of a SplitContainer should be marked as auto-generated in order it to be cleaned up by the Docking control. \r\n\r\nThe example shows how to set this property in XAML and in code to the dynamically generated RadPanes. The saving of the layout in xml file demonstrates easier how the elements are removed if they are auto-generated.","KeyWords":"Auto Generated Tag, splitcontainer, dynamically, radpanes, cleaned, docking"},
{"Name":"Click Flyout Behavior With Animation","ExampleInfo":{"Name":"Click Flyout Behavior With Animation","DirectoryName":"ClickFlyoutBehaviorWithAnimation","ExampleFileNames":["ClickFlyoutBehaviorWithAnimation_SL.csproj","AnimatedFlyoutBehavior.cs","App_SL.xaml","App_SL.xaml.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/ClickFlyoutBehaviorWithAnimation/","Description":"This example demonstrates how to create a custom FlyoutBehavior for the RadDocking control in order to achieve a ClickFlyoutBehavior with slide in/out animations. The example is available for both Silverlight and WPF.","KeyWords":"Click Flyout Behavior With Animation, custom, animations, docking"},
{"Name":"Close Single Pane In Tool Window","ExampleInfo":{"Name":"Close Single Pane In Tool Window","DirectoryName":"CloseSinglePaneInToolWindow","ExampleFileNames":["CloseSinglePaneInToolWindow_SL.csproj","App_SL.xaml","App_SL.xaml.cs","CustomItemsFactory.cs","CustomToolWindow.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/CloseSinglePaneInToolWindow/","Description":"This example demonstrates how to create a custom ItemsFactory and ToolWindow in order to customize the way the Close button of the floating ToolWindow closes Panes when there are multiple Panes in the PaneGroup for Silverllight and WPF.\r\n\r\nThe example shows how to achieve a behavior, where the close button closes only the current \r\nactive Pane rather than the hole PaneGroup.","KeyWords":"Close Single Pane In Tool Window, custom, itemsfactory, floating, multiple, behavior, docking"},
{"Name":"Compass Programming","ExampleInfo":{"Name":"Compass Programming","DirectoryName":"CompassProgramming","ExampleFileNames":["CompassProgramming_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","PaneType.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/CompassProgramming/","Description":"This example demonstrates how to customize which compasses are shown when dragging different RadPanes in the control.\r\n\r\nWhen dragging a \"Green\" RadPane only the center compass over other \"Green\" RadPanes is shown and all of the root compasses.\r\nWhen dragging a \"Purple\" RadPane all of the compasses (right, left, top, bottom and center) over other \"Purple\" RadPanes are shown and none of the root compasses.\r\n\r\nMore details could be found in our online help:\r\nFor WPF - http://www.telerik.com/help/wpf/raddocking-how-to-implement-conditional-docking.html\r\nFor Silverlight - http://www.telerik.com/help/silverlight/raddocking-how-to-implement-conditional-docking.html","KeyWords":"Compass Programming, customize, dragging, radpane, root, docking"},
{"Name":"Custom DockingPanesFactory","ExampleInfo":{"Name":"Custom DockingPanesFactory","DirectoryName":"CustomDockingPanesFactory","ExampleFileNames":["CustomDockingPanesFactory_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MyDockingPanesFactory.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/CustomDockingPanesFactory/","Description":"This example demonstrates how to use a custom DockingPanesFactory in order to add the RadPanes from the PanesSource collection to a predefined empty RadPaneGroups in the control. The example also demonstrates how to permanently remove a RadPane instance when its 'X' close button is pressed.","KeyWords":"Custom DockingPanesFactory, panesource, predefined, remove, permanently, close"},
{"Name":"Specific ToolWindow Styles based on RadPane 'tag'","ExampleInfo":{"Name":"Specific ToolWindow Styles based on RadPane 'tag'","DirectoryName":"DifferentToolWindowStyles","ExampleFileNames":["DifferentToolWindowStyles_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/DifferentToolWindowStyles/","Description":"This example demonstrates how to set different Style to the auto generated ToolWindow instance when a RadPane or a RadPaneGroup is made floating.","KeyWords":"Specific ToolWindow Styles based on RadPane 'tag', auto, generated, floating, docking"},
{"Name":"MDI Layout","ExampleInfo":{"Name":"MDI Layout","DirectoryName":"MDILayout","ExampleFileNames":["MDILayout_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","ViewModel.cs","WindowViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/MDILayout/","Description":"This example demonstrates how to achieve MDI layout with the Docking control.","KeyWords":"MDI Layout, docking"},
{"Name":"Nested RadDocking Save and Load of layout","ExampleInfo":{"Name":"Nested RadDocking Save and Load of layout","DirectoryName":"NestedDockingSaveLoadLayout","ExampleFileNames":["NestedDockingSaveLoadLayout_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/NestedDockingSaveLoadLayout/","Description":"This example demonstrates how to save and load the layout in nested RadDocking scenarios. The approved mechanism is to save/load each controls layout separately but simultaneously.","KeyWords":"Nested RadDocking Save and Load of layout, separately, simultaneously"},
{"Name":"How to use PanesSource in nested RadDocking scenarios","ExampleInfo":{"Name":"How to use PanesSource in nested RadDocking scenarios","DirectoryName":"NestedDockingWithPanesSource","ExampleFileNames":["NestedDockingWithPanesSource_SL.csproj","App_SL.xaml","App_SL.xaml.cs","CustomDockingPanesFactory.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/NestedDockingWithPanesSource/","Description":"This example demonstrates how the PanesSource collection could be used in nested RadDocking scnearios.","KeyWords":"How to use PanesSource in nested RadDocking scenarios, demonstrates, panesource"},
{"Name":"Open Closed Panes With Context Menu","ExampleInfo":{"Name":"Open Closed Panes With Context Menu","DirectoryName":"OpenClosedPanesWithContextMenu","ExampleFileNames":["OpenClosedPanesWithContextMenu_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/OpenClosedPanesWithContextMenu/","Description":"This example demonstrates how to show the closed RadPanes when you close them by their close button also shows how to permanently close a RadPane for Silverlight and WPF.","KeyWords":"Open Closed Panes With Context Menu, docking, show, permanently, button"},
{"Name":"Ordered Unpinned Panes","ExampleInfo":{"Name":"Ordered Unpinned Panes","DirectoryName":"OrderedUnpinnedPanes","ExampleFileNames":["OrderedUnpinnedPanes_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/OrderedUnpinnedPanes/","Description":"The example demonstrates how to keep the unpinned RadPanes ordered the way they were defined in XAML while pining/unpinning them at run-time.","KeyWords":"Ordered Unpinned Panes, docking, keep, pinning, pin, run, time"},
{"Name":"Pane Group Items Source","ExampleInfo":{"Name":"Pane Group Items Source","DirectoryName":"PaneGroupItemsSource","ExampleFileNames":["PaneGroupItemsSource_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","PaneGroupExtensions.cs","PaneModel.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/PaneGroupItemsSource/","Description":"IMPORTANT:\r\n\r\nWith our Q3 2013 SP release of RadDocking there is a new functionality for achieving MVVM scenarios that require an equivalent of ItemsSource with the addition of PanesSource. More details about the PanesSource feature can be found here:\r\nFor WPF: http://www.telerik.com/help/wpf/raddocking-features-panes-panesource.html\r\nFor SL: http://www.telerik.com/help/silverlight/raddocking-features-panes-panesource.html\r\n\r\nThe example demonstrates how to extend the functionality of RadDocking with the use of Attached Properties in order to \r\nset a collection of Panes as ItemsSource of a specific PaneGroup for Silverlight and WPF.\r\n\r\nFor more detailed infroamtion could be found in this blog post: \r\nhttp://blogs.telerik.com/xamlteam/posts/13-01-14/extending-the-functionality-of-radcontrols-with-attached-properties","KeyWords":"Pane Group Items Source, docking, mvvm, panessource, extend, attached, property"},
{"Name":"Save/Load layout with PaneSource","ExampleInfo":{"Name":"Save/Load layout with PaneSource","DirectoryName":"PaneSourceWithLayout","ExampleFileNames":["PaneSourceWithLayout_SL.csproj","App_SL.xaml","App_SL.xaml.cs","CustomDockingPanesFactory.cs","MainPage.xaml","MainPage.xaml.cs","PaneViewModel.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/PaneSourceWithLayout/","Description":"This examples demonstrates how to handle scenarios where the layout of the RadDocking is loaded and there is a PaneSource collection set. In this scenario if the saved layout matches the PaneSource collection no conflicts are found and all is well, but if the bound collection contains more instances of RadPanes, then the saved in the layout XML the additional RadPane instance in the PanesSource collection will be disregarded. This is an expected behavior that needs to be handled.","KeyWords":"Save/Load layout with PaneSource, docking, loaded, collection"},
{"Name":"Save/Load a part of RadDocking layout","ExampleInfo":{"Name":"Save/Load a part of RadDocking layout","DirectoryName":"PartialSaveLoadLayout","ExampleFileNames":["PartialSaveLoadLayout_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md","Scope.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/PartialSaveLoadLayout/","Description":"This example demonstrates how to save/load only one part of the RadDocking layout. Using the ElementLayoutSaving event we cancel the saving of the undesired elements.\r\nWith the ElementLayoutCleaning event we cancel the cleaning of all elements that weren't saved in the ElementLayoutSaving event handler.","KeyWords":"Save/Load a part of RadDocking layout, docking, partial, persist, cancel, serializationtag"},
{"Name":"Restore focus to floating Pane content","ExampleInfo":{"Name":"Restore focus to floating Pane content","DirectoryName":"RestoreFocusOnStateChanged","ExampleFileNames":["RestoreFocusOnStateChanged_SL.csproj","App_SL.xaml","App_SL.xaml.cs","CustomGeneratedItemsFactory_SL.cs","CustomToolWindow_SL.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/RestoreFocusOnStateChanged/","Description":"This example demonstrates how to restore the keyboard focus to the last focused element in the RadPane when it is made floating. Click in one of the TextBox controls and then make that RadPane floating by dragging it by its header.","KeyWords":"Restore focus to floating Pane content, docking, keyboard"},
{"Name":"Retain Pane Size","ExampleInfo":{"Name":"Retain Pane Size","DirectoryName":"RetainPaneSize","ExampleFileNames":["RetainPaneSize_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/RetainPaneSize/","Description":"This example demonstrates how to retain the size of the Pane using the new RetainPaneSizeMode property of RadDocking.","KeyWords":"Retain Pane Size, docking, retainpanesizemode"},
{"Name":"Save Load Layout","ExampleInfo":{"Name":"Save Load Layout","DirectoryName":"SaveLoadLayout","ExampleFileNames":["SaveLoadLayout_SL.csproj","App_SL.xaml","App_SL.xaml.cs","LayoutDataViewModel.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/SaveLoadLayout/","Description":"This example demonstrates how the Save/Load layout functionality work in the RadDocking control. \r\nIf a Panes content/properties needs to be persisted when the layout is saved setting the \r\nSerializationTag is required. In order to exclude a Pane from the Save layout functionality \r\nsetting the ExcludedFromLayoutSave is required.","KeyWords":"Save Load Layout, docking, content, properties, persist, serializationtag, exclude, excludedfromlayoutsave"},
{"Name":"PRISM Implementation with MEF","ExampleInfo":{"Name":"PRISM Implementation with MEF","DirectoryName":"ShellPrism","ExampleFileNames":["ShellPrism_SL.csproj","App_SL.xaml","App_SL.xaml.cs","DockActivationRegionBehavior.cs","DockingRegionAdapter.cs","FileServicesModule.cs","IPaneModel.cs","PRISMSaveLoadLayoutHelper.cs","Readme.md","Shell.xaml","Shell.xaml.cs","ShellBootstrapper.cs","ShellDockingPanesFactory.cs","Events\\ActivateViewEvent.cs","Events\\CreateDocumentEvent.cs","Events\\LoadLayoutEvent.cs","Events\\SaveLayoutEvent.cs","Menu\\MenuItemActivatePane.xaml","Menu\\MenuItemActivatePane.xaml.cs","Menu\\MenuItemLoad.xaml","Menu\\MenuItemLoad.xaml.cs","Menu\\MenuItemNew.xaml","Menu\\MenuItemNew.xaml.cs","Menu\\MenuItemSave.xaml","Menu\\MenuItemSave.xaml.cs","Views\\ErrorList.xaml","Views\\ErrorList.xaml.cs","Views\\NewDocument.xaml","Views\\NewDocument.xaml.cs","Views\\Output.xaml","Views\\Output.xaml.cs","Views\\PropertiesView.xaml","Views\\PropertiesView.xaml.cs","Views\\ServerExplorer.xaml","Views\\ServerExplorer.xaml.cs","Views\\SolutionExplorer.xaml","Views\\SolutionExplorer.xaml.cs","Views\\ToolBox.xaml","Views\\ToolBox.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/ShellPrism/","Description":"This example shows how to implement the main functionality of RadDocking using PRISM and MEF. Here are the covered scenarios\r\n - MEF\r\n - MVVM\r\n - CustomRegionAdapter\r\n - CustomRegionBehavior which helps Avtivation implementation\r\n - Activation\r\n - Custom Event aggregators\r\n - Predefined docking layout at start up\r\n - Save and Load docking layout on application start up and exit\r\n - Adding new documents at runtime","KeyWords":"PRISM Implementation with MEF, docking, mvvm, customregionadapter, customregionbehavior, activation, aggregators, predefined, save, load, runtime"},
{"Name":"How to get the SplitContainer's DockState","ExampleInfo":{"Name":"How to get the SplitContainer's DockState","DirectoryName":"SplitContainerDockState","ExampleFileNames":["SplitContainerDockState_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/SplitContainerDockState/","Description":"This example demonstrates how to get the DockState of a SplitContainer. The DockState is an enumeration that represents the state of a SplitContainer compared to the root of the RadDocking.","KeyWords":"How to get the SplitContainer's DockState, docking, root"},
{"Name":"Visual Studio Implementation with MVVM","ExampleInfo":{"Name":"Visual Studio Implementation with MVVM","DirectoryName":"VisualStudioDocking","ExampleFileNames":["VisualStudioDocking_SL.csproj","App_SL.xaml","App_SL.xaml.cs","CustomDockingPanesFactory.cs","CustomSaveLoadLayoutHelper.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md","View\\ErrorList.xaml","View\\ErrorList.xaml.cs","View\\Output.xaml","View\\Output.xaml.cs","View\\PropertiesPane.xaml","View\\PropertiesPane.xaml.cs","View\\ServerExplorer.xaml","View\\ServerExplorer.xaml.cs","View\\SolutionExplorer.xaml","View\\SolutionExplorer.xaml.cs","View\\ToolBox.xaml","View\\ToolBox.xaml.cs","ViewModel\\MainWindowViewModel_SL.cs","ViewModel\\PaneViewModel_SL.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Docking/VisualStudioDocking/","Description":"This example shows how to implement the main functionality of RadDocking using MVVM in VS-like scenarios. Here are the covered points:\r\n - MVVM\r\n - Activation\r\n - Predefined docking layout at start up\r\n - Save and Load docking layout on application start up and exit\r\n - Adding new documents at runtime\r\n - Custom Compass logic","KeyWords":"Visual Studio Implementation with MVVM, vs, activation, predefined, save, load, layout, compass"}]