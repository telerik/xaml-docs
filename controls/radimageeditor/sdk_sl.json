[{"Name":"Custom UI","ExampleInfo":{"Name":"Custom UI","DirectoryName":"CustomUIRadImageEditor","ExampleFileNames":["CustomUIRadImageEditor_SL.csproj","App_SL.xaml","App_SL.xaml.cs","CustomSettingsContainer.xaml","CustomSettingsContainer.xaml.cs","ImageExampleHelper.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ImageEditor/CustomUIRadImageEditor/","Description":"\r\nIn this sample you can see how to create custom UI for RadImageEditor. A custom container for settings is implemented in a user control and set to be the image editor's ToolSettingsContainer.","KeyWords":"Custom UI"},
{"Name":"Custom Watermark Tool","ExampleInfo":{"Name":"Custom Watermark Tool","DirectoryName":"CustomWatermarkTool","ExampleFileNames":["CustomWatermarkTool_SL.csproj","App_SL.xaml","App_SL.xaml.cs","ImageExampleHelper.cs","MainPage.xaml","MainPage.xaml.cs","WatermarkCommand.cs","WatermarkCommandContext.cs","WatermarkTool.cs","WatermarkToolSettings.xaml","WatermarkToolSettings.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ImageEditor/CustomWatermarkTool/","Description":"\nThe example shows how a custom tool can be build. A respective command and tool settings have been implemented as well and wired to work with RadImageEditorUI.","KeyWords":"Custom Watermark Tool"},
{"Name":"Drawing","ExampleInfo":{"Name":"Drawing","DirectoryName":"Drawing","ExampleFileNames":["Drawing_SL.csproj","App_SL.xaml","App_SL.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Shapes\\TelerikLogo.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ImageEditor/Drawing/","Description":"\nThis example demonstrates how to implement a custom shape and use it in the Draw Tool of the RadImageEditor. The example utilizes the implicit styling approach explained at http://docs.telerik.com/devtools/wpf/styling-and-appearance/styling-apperance-implicit-styles-overview.html.","KeyWords":"Drawing"},
{"Name":"Handle Tool Commit","ExampleInfo":{"Name":"Handle Tool Commit","DirectoryName":"HandleToolCommit","ExampleFileNames":["HandleToolCommit_SL.csproj","App_SL.xaml","App_SL.xaml.cs","DoubleToStringConverter.cs","ImageImporter.cs","ImageInfo.cs","MainPage.xaml","MainPage.xaml.cs","RadImageEditor.xaml","RadImageEditor.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ImageEditor/HandleToolCommit/","Description":"\r\nThe example demonstrates how you can manipulate with RadImageEditor by handling its ToolCommitting and ToolCommitted events.","KeyWords":"Handle Tool Commit"},
{"Name":"Localization","ExampleInfo":{"Name":"Localization","DirectoryName":"Localization","ExampleFileNames":["Localization_SL.csproj","App_SL.xaml","App_SL.xaml.cs","ImageExampleHelper.cs","MainPage.xaml","MainPage.xaml.cs","RadImageEditorResources.Designer.cs","RadImageEditorResources.resx"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ImageEditor/Localization/","Description":"\nThe example shows how RadImageEditor along with the predefined UI of the control can be localized.","KeyWords":"Localization"},
{"Name":"First look","ExampleInfo":{"Name":"First look","DirectoryName":"RadImageEditorUIFirstLook","ExampleFileNames":["RadImageEditorUIFirstLook_SL.csproj","App_SL.xaml","App_SL.xaml.cs","ImageExampleHelper.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ImageEditor/RadImageEditorUIFirstLook/","Description":"\r\nThe example demonstrates how to use the predefined UI of RadImageEditor - RadImageEditorUI, with all implemented editing tools. It also shows how to load a file in the image editor.","KeyWords":"First look"},
{"Name":"RadUpload integration","ExampleInfo":{"Name":"RadUpload integration","DirectoryName":"RadUploadIntegration","ExampleFileNames":["RadUploadIntegration.csproj","App.xaml","App.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MySaveCommand.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ImageEditor/RadUploadIntegration/","Description":"\r\nThis examples shows how a custom Save command can be created and wired with the UI, so that instead of saving files on the client machine, the user can upload them to the server through RadUpload.","KeyWords":"RadUpload integration"}]