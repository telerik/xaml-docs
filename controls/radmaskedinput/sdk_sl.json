[{"Name":"Custommizations","ExampleInfo":{"Name":"Custommizations","DirectoryName":"Custommizations","ExampleFileNames":["MaskCustomizationsSL.csproj","App_SL.xaml","App_SL.xaml.cs","CustomizationsViewModel.cs","Example.xaml","Example.xaml.cs","FirstCharCapitalFormatToken.cs","MainPage.xaml","MainPage.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/MaskedInput/Custommizations/","Description":"Custommizations\nThis example demonstrates how the masked input control can be customized.\r\n\tThe Bank Account RadMaskedCurrencyInput uses a customized culture to represent its value as a Bank Input form. The modified culture changes the CurrencyGroupSizes and the CurrencyGroupSeparator.\r\n\tThe Full Name RadMaskedTextInput uses a multiline mask with embedded text to enable first and last name input. It also uses a customized formatting token, which converts the first character of each name section to a capital one.\r\nThe three masked input controls also use different kinds of validation - through Data Annotation attributes, intrinsic Validation and custom.\r\n\r\n[//]:","KeyWords":"Custommizations,  custommizations, imodifiertokenvalidationrule, maskedcurrencyinput, maskedtextinput, databinding, mvvm, addcustomvalidationrule, validationexception"},
{"Name":"DataValidation","ExampleInfo":{"Name":"DataValidation","DirectoryName":"DataValidation","ExampleFileNames":["DataValidation_SL.csproj","App_SL.xaml","App_SL.xaml.cs","DataErrorViewModel.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","ValidationExceptionsViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/MaskedInput/DataValidation/","Description":"Data Validation\nThe DataValidation SDK sample of the MaskedInput Controls demonstrates how you can:\r\n\r\n* Validate the data value on load with IDataErrorInfo\r\n* Validate with throwing DataExceptions  \r\n* Validate with using Data Annotations\r\n\r\n[//]:","KeyWords":"DataValidation,  radmaskednumericinput, databinding, mvvm, idataerrorinfo, datavalidation, validatesondataerrors, validationexceptions"},
{"Name":"DynamicFormatString","ExampleInfo":{"Name":"DynamicFormatString","DirectoryName":"DynamicFormatString","ExampleFileNames":["DynamicFormatString_SL.csproj","App_SL.xaml","App_SL.xaml.cs","CustomNumericInput.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/MaskedInput/DynamicFormatString/","Description":"Dynamic Format String\nUsers often need to type doubles like 1.234, 56.78, 123.9 and they do NOT need to see these values to be completed with zeros like:\r\n\r\n* 1.23400\r\n* 56.7800\r\n* 123.90000\r\n\r\nTo achieve this effect users can users can use No-Mask (Mask=\"\") and update the FormatString property runtime. Furthermore, users need delete and backspace keys to not produce zeros.\r\nFor example pressing delete here 12.3|45 to produce 12.35 but not 12.305. This is demonstrated in the sample with overriding the HandleBackKeyNomask and HandleDeleteKeyNoMask methods of the RadMaskedNumericInput.\r\nFinally, it is good idea to limit the input somehow both on the left and on the right of  the decimal point because double loses precision after 15 digits.\r\n\r\n[//]:","KeyWords":"DynamicFormatString,  dynamicformatstring, maskedinputextensions, maskednumericinput, custom, maximumdigitsonright"},
{"Name":"MinusKeyCustomizations","ExampleInfo":{"Name":"MinusKeyCustomizations","DirectoryName":"MinusKeyCustomizations","ExampleFileNames":["MinusKeyCustomizations_SL.csproj","App_SL.xaml","App_SL.xaml.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","NumericInputMinusClearsSelection.cs","NumericInputMinusDeletable.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/MaskedInput/MinusKeyCustomizations/","Description":"Minus Key Customizations\nMinusKeyCustomizations SDK sample shows how to use the negative sign symbol in custom, non- default way.\r\nPlease note that although the code shows RadMaskedNumericInput and its custom subclasses, the same approach can be used for RadMaskedCurrencyInput.\r\n* The first control in the demo is RadMaskedNumericInput with AllowMinusOnNullValues set to true. This allows you to press OemMinus / Subtract key on the keyboard when the value is null resulting in entering negative sign symbol before entering any digits. \r\n\r\n* The second control in the demo is custom RadMaskedNumericInput which allows you to select all and press OemMinus / Subtract key resulting in clearing the value and entering negative sign. This is achieved with overriding HandleSubtractkey method of RadMaskedNumericInput. \r\n\r\n* The third control in the demo is custom RadMaskedNumericInput which allows you to delete the negative sign symbol with Backspace / Delete keys on the keyboard. This is achieved with overriding CanModifyChar, HandleBackKeyNoMask and HandleDeleteKeyNoMaks methods of the RadMaskedNumericInput.\r\n\r\n[//]:","KeyWords":"MinusKeyCustomizations,  minuskeycustomizations, maskednumericinput, allowminusonnullvalues, databinding, mvvm, maskedinputextensions"},
{"Name":"ValueToTextConverter","ExampleInfo":{"Name":"ValueToTextConverter","DirectoryName":"ValueToTextConverter","ExampleFileNames":["ValueToTextConverterSL.csproj","App_SL.xaml","App_SL.xaml.cs","Example.xaml","Example.xaml.cs","MainPage.xaml","MainPage.xaml.cs","Converters\\NumericToTextConverter.cs","Converters\\StringValueToTextConverter.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/MaskedInput/ValueToTextConverter/","Description":"Value To Text Converter\nThis example demonstrates the usage of an IValueConverter to convert and customize the Value into Display Text.\n\n[//]:","KeyWords":"ValueToTextConverter,  valuetotextconverter, maskednumericinput, maskedcurrencyinput, maskedtextinput, valuetotextconverter, displaytext"}]