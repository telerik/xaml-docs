[{"Name":"Autoscrolling","ExampleInfo":{"Name":"Autoscrolling","DirectoryName":"Autoscrolling","ExampleFileNames":["Autoscrolling_WPF.csproj","App.config","App.xaml","App.xaml.cs","ConnectionManipulationAutoScrollBehavior.cs","DiagramScrollingInfo.cs","MainWindow.xaml","MainWindow.xaml.cs","ScrollingDirection.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/Autoscrolling/","Description":"This example demonstrates how to implement autoscrolling behavior in RadDiagram. Dragging a shape or connection outside of the viewport will automatically start a pan operation.","KeyWords":"Autoscrolling, connectionmanipulation, pan, drag"},
{"Name":"Control Shape","ExampleInfo":{"Name":"Control Shape","DirectoryName":"ControlShape","ExampleFileNames":["ControlShape_WPF.csproj","App.xaml","App.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","ProductSales.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/ControlShape/","Description":"This sample demonstrates how to use any XAML control in a Diagram Shape.\r\nYou can put any content directly in a shape either in XAML or using C# code.","KeyWords":"Control Shape, gridview, host"},
{"Name":"Custom Connection Caps","ExampleInfo":{"Name":"Custom Connection Caps","DirectoryName":"CustomConnectionCaps","ExampleFileNames":["CustomConnectionCaps_WPF.csproj","App.config","App.xaml","App.xaml.cs","CustomConnection.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/CustomConnectionCaps/","Description":"The CustomConnectionCaps SDK sample demonstrates a possible way to create custom Connection Caps.\r\nSometimes you may need custom geometry for the connection caps. In such case you can inherit the RadDiagramConnection class and override the CreateSourceCapGeometry and CreateTargetCapGeometry methods.\r\n\r\nThe approach is also described in the following help article:\r\n\r\nhttp://docs.telerik.com/devtools/wpf/controls/raddiagram/howto/create-custom-connectioncap","KeyWords":"Custom Connection Caps, geometry, pathfigure"},
{"Name":"Custom Connectors","ExampleInfo":{"Name":"Custom Connectors","DirectoryName":"CustomConnectors","ExampleFileNames":["CustomConnectors_WPF.csproj","AbsoluteConnector.cs","App.config","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/CustomConnectors/","Description":"\nThe sample demonstrates that you can easily define your own connector points for every RadDiagramShape. For more information read the Connectors section in the help.","KeyWords":"Custom Connectors"},
{"Name":"Custom Connectors Tools","ExampleInfo":{"Name":"Custom Connectors Tools","DirectoryName":"CustomConnectorsTools","ExampleFileNames":["CustomConnectorsTool_WPF.csproj","AddConnectorControl.xaml","AddConnectorControl.xaml.cs","App.xaml","App.xaml.cs","CustomConnectionTool.cs","CustomConnectorAddTool.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/CustomConnectorsTools/","Description":"The Custom Connectors Tool Diagram SDK shows some possible ways to create Custom Connectors runtime.\r\n\r\n\t- the CustomConnectorAddTool allows you to add custom connectors by pressing Shift + Ctrl + MouseDown over a shape.\r\n\t- the CustomConnectionTool replaces the default ConnectionTool of the RadDiagram and allows you to define custom connectors on the intersection point between connection and shape. Simply create the connection with mouse and drop it over a shape (but not on a connector). This will create custom connector and attach the connection to it.\r\n\r\n\t- the SettingsPane in the demo provides a way to add custom Connector via additional custom made userControl placed in the second tab of the SettingsPane.","KeyWords":"Custom Connectors Tools, connectiontool, hittest, service"},
{"Name":"Custom Services","ExampleInfo":{"Name":"Custom Services","DirectoryName":"CustomServices","ExampleFileNames":["CustomServices_WPF.csproj","App.config","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","MyDragging.cs","MyResizing.cs","MyRotation.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/CustomServices/","Description":"This example shows how you could customize some of the buld-in diagram services. \r\nThe Diagramming Framework exposes a set of services that control and confugure different diagramming tools and features. \r\nThis is why the services come in handy in scenarios requiring significant customizations in the default behavior of the RadDiagram and its elements","KeyWords":"Custom Services, drag, resize, rotat"},
{"Name":"Custom SettingsPane","ExampleInfo":{"Name":"Custom SettingsPane","DirectoryName":"CustomSettingsPane","ExampleFileNames":["CustomSettingsPane_WPF.csproj","app.config","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","Resources.xaml","ViewModels\\CustomGallery.cs","ViewModels\\GraphSource.cs","ViewModels\\HierarchicalDataTemplate.cs","ViewModels\\Link.cs","ViewModels\\MainViewModel.cs","ViewModels\\ShapeViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/CustomSettingsPane/","Description":"The CustomSettingsPane example highlights the following features of RadDiagram and DiagramExtensions:\r\n*Binding the DiagramToolBox\r\n*Drawing Tools in MVVM Diagram\r\n*Customizing Settings Pane:\r\n    -Adding new tabs\r\n    -Binding to ViewModel's properties\r\n    -Binding to App's MainViewModel's Commands\r\n    -Adding custom shapes in toolbox from SettingsPane","KeyWords":"Custom SettingsPane, mvvm, drawing, path, penciltool, commands, diagramtoolbox"},
{"Name":"Custom Toolbox Drag Drop","ExampleInfo":{"Name":"Custom Toolbox Drag Drop","DirectoryName":"CustomToolboxDragDrop","ExampleFileNames":["CustomToolboxDragDrop_WPF.csproj","App.config","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","ReadMe.md","ViewModels\\MainViewModel.cs","ViewModels\\MyGallery.cs","ViewModels\\MyShape.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/CustomToolboxDragDrop/","Description":"\r\nThe sample demonstrates how to populate a RadDiagramToolbox with a custom business collection of objects. \r\nIt also implements a sample drag/drop scenario between the toolbox and a RadDiagram instance.","KeyWords":"Custom Toolbox Drag Drop"},
{"Name":"Custom Tools","ExampleInfo":{"Name":"Custom Tools","DirectoryName":"CustomTools","ExampleFileNames":["CustomTools_WPF.csproj","App.config","App.xaml","App.xaml.cs","ConnectShapesTool.cs","ForbidNWSEResizing.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","ShapeTool.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/CustomTools/","Description":"This example shows how you could customize some of the build-in diagram tools and add new ones. \r\nThe Diagramming Framework exposes a set of tools that handle the main user interactions. \r\nOverriding the mouse/key events in the default tools you can easily customize their behaviour.","KeyWords":"Custom Tools, shapetool, resiz, restrict, bounds"},
{"Name":"Diagram Ribbon UI","ExampleInfo":{"Name":"Diagram Ribbon UI","DirectoryName":"DiagramRibbonUI","ExampleFileNames":["DiagramRibbonUI_WPF.csproj","App.config","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","HierarchicalDataTemplate.cs","MainWindow.xaml","MainWindow.xaml.cs","Resources.xaml","SampleItem.cs","SamplesFactory.cs","SamplesViewModel.cs","Common\\Extensionutilities.cs","Common\\ExportToHTML\\ExportStyles.html","Common\\ExportToHTML\\HTMLExportHelper.cs","Common\\ExportToHTML\\Loader.js","Common\\ExportToHTML\\RadDiagram.js","Common\\ExportToHTML\\RadSVG.js","Common\\SampleDiagrams\\Cycle3.xml","Common\\SampleDiagrams\\FloorPlan.xml","Common\\SampleDiagrams\\Flow2.xml","Common\\SampleDiagrams\\Rolls.xml","Common\\SampleDiagrams\\SimpleFlow.xml","Common\\SampleDiagrams\\Stakeholder.xml","Common\\SampleDiagrams\\Supply.xml","Converters\\PercentageConverter.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/DiagramRibbonUI/","Description":"The sample demonstrates how to create RibbonUI for most of the Diagramming framework functionality.\r\nThe sample can be used for first steps to any Diagramming application. \r\nIt is a strip version of the QSF Diagrams FirstLook sample.","KeyWords":"Diagram Ribbon UI,  firstlook"},
{"Name":"Diagram Tool Box","ExampleInfo":{"Name":"Diagram Tool Box","DirectoryName":"DiagramToolBox","ExampleFileNames":["DiagramDesignToolBox_WPF.csproj","App.config","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainViewModel.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","SampleItem.cs","SamplesFactory.cs","Styles.xaml","Common\\Extensionutilities.cs","Common\\ExportToHTML\\ExportStyles.html","Common\\ExportToHTML\\HTMLExportHelper.cs","Common\\ExportToHTML\\Loader.js","Common\\ExportToHTML\\RadDiagram.js","Common\\ExportToHTML\\RadSVG.js","Common\\SampleDiagrams\\Cycle3.xml","Common\\SampleDiagrams\\FloorPlan.xml","Common\\SampleDiagrams\\Flow2.xml","Common\\SampleDiagrams\\Rolls.xml","Common\\SampleDiagrams\\SimpleFlow.xml","Common\\SampleDiagrams\\Stakeholder.xml","Common\\SampleDiagrams\\Supply.xml"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/DiagramToolBox/","Description":"The DesignToolBox example allows you to drag & drop various shapes from a custom toolbox control. The example also supports the standard available diagram features such as:\r\n\t- Drag & Drop of shapes and connections\r\n\t- Shapes Rotation & Resizing\r\n\t- Cut/Copy/Paste/Delete/Undo/Redo \r\n\t- Pan and Zoom\r\n\t- Snap to Grid \r\n\t- Align Items \r\n\t- Graph Layout \r\n\t- Read-only Diagrams  \r\n\t- Optimized performance through Virtualization \r\n\t- Save/Load Layout through Serialization \r\n\t- Various Mouse tools \r\n\t- Rich Commands and Events Model \r\n\t- MVVM Support \r\nThis is a strip version of the QSF sample DiagramToolBox.","KeyWords":"Diagram Tool Box,  layout, save, load, settingspane"},
{"Name":"Docking Integration","ExampleInfo":{"Name":"Docking Integration","DirectoryName":"DockingIntegration","ExampleFileNames":["DockingIntegration_WPF.csproj","App.xaml","App.xaml.cs","MainView.xaml","MainView.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","ViewModels\\MainViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/DockingIntegration/","Description":"This example demonstrates how to take advantage of the RadDocking control structure to display the RadDiagram, RadDiagramRuler, RadDiagramToolbox and RadDiagramNavigationPane in one view.","KeyWords":"Docking Integration,  ruler, toolbox, navigationpane"},
{"Name":"Export To PDF","ExampleInfo":{"Name":"Export To PDF","DirectoryName":"ExportToPDF","ExampleFileNames":["ExportToPDF_WPF.csproj","app.config","App.xaml","App.xaml.cs","ColorHelper.cs","EditorInfo.cs","ExportHelper.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/ExportToPDF/","Description":"\nThis sample demonstrates how you can export the RadDiagram directly into a pdf file using our PDFProcessing. ","KeyWords":"Export To PDF"},
{"Name":"Gliding Connector","ExampleInfo":{"Name":"Gliding Connector","DirectoryName":"GlidingConnector","ExampleFileNames":["GlidingConnector_WPF.csproj","App.xaml","App.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/GlidingConnector/","Description":"\nThe sample demonstrates that you can easily define different Gliding styles for every RadDiagramShapes.","KeyWords":"Gliding Connector"},
{"Name":"GlyphToolBox","ExampleInfo":{"Name":"GlyphToolBox","DirectoryName":"GlyphToolBox","ExampleFileNames":["GlyphToolBox.csproj","App.config","App.xaml","App.xaml.cs","GlyphInfo.cs","GlyphTextConverter.cs","MainWindow.xaml","MainWindow.xaml.cs","ReadMe.md","ToolBoxTemplateSelector.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/GlyphToolBox/","Description":"The GlyphToolBox Diagram SDK shows how you can extend the default Diagram Toolbox with the Glyphs collection we provide from R3 2016.\r\nGlyphs are SVG images built via with special FontFamily you can apply to TextBlock / Button / DiagramTextShape etc.\r\nIn the example Glyphs are added in the Diagram ToolBox, DiagramSettingsPane, RadAutoCompleteBox and RadButtons.\r\nBelow are listed some demo specifics:\r\n\r\n\t-- Diagram Settings Pane uses custom style for its TextTab - the style is located in App.xaml\r\n\t-- Diagram ToolBox needs ItemTemplate selector in order to use TextShapes displaying Glyphs\r\n\t-- To display a glyph in simple TextBlock you need two settings:\r\n\t\t- FontFamily=\"{StaticResource TelerikWebUI}\"\r\n\t\t- Text set to special string located in /Telerik.Windows.Controls;component/Themes/FontResources.xaml\r\n\t\t- the strings are in these forms: &#xe62e; &#xe67f; etc\r\n\t-- On copy paste, the glyph string needs to be encoded / decoded\r\n\t-- Glyphs are read from the file /Telerik.Windows.Controls;component/Themes/FontResources.xaml in method InitializeToolBox()","KeyWords":"GlyphToolBox"},
{"Name":"Hide Bezier Handles","ExampleInfo":{"Name":"Hide Bezier Handles","DirectoryName":"HideBezierHandles","ExampleFileNames":["HideBezierHandles_WPF.csproj","App.config","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","TypeToVisibilityConverter.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/HideBezierHandles/","Description":"\nThis sample demonstrates how you can hide the bezier handles using two custom styles.","KeyWords":"Hide Bezier Handles"},
{"Name":"Layout","ExampleInfo":{"Name":"Layout","DirectoryName":"Layout","ExampleFileNames":["Layout_WPF.csproj","App_wpf.xaml","App_wpf.xaml.cs","GraphExtensions.cs","GraphGenerationSpecifications.cs","MainView.xaml","MainView.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","SampleItem.cs","Images\\RadDiagramWPF.ico"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/Layout/","Description":"The layout sample highlights two areas or RadDiagram which are somewhat hidden in the API although it comprises a considerable amount of code and power:\r\n\r\n- the graph analysis API which implements the typical graph algorithms\r\n- the graph layout API which auto-organizes a graph \r\n\r\nThe sample allows you to:\r\n\r\n- create random graphs and visualize them. The code shows you how various methods are available in RadDiagram to create (pseudo-random) graphs with certain constraints like connectedness, tree-connected, single component, incidence constraints and so on.\r\n- see how certain parameters affect the graph layout and how different layout algorithms give a different result\r\n- see how certain well-known questions about graphs can be answered using the graph API; what is the shortest path between two nodes, what is a spanning tree in a graph, what is the longest routed between nodes, how many components does the graph have...and more.\r\n- understand the generic way to approach graph analysis using RadDiagram\r\n\r\nWhile this sample is certainly not a full application examplifying a graph-theoretic textbook it is a stepping stone if you wish to go into this direction.","KeyWords":"Layout,  treelayout, sugiyama, settings, radial, component, graph"},
{"Name":"Multiple Roots In Single Tree Layout","ExampleInfo":{"Name":"Multiple Roots In Single Tree Layout","DirectoryName":"MultipleRootsInSingleTreeLayout","ExampleFileNames":["MultipleRootsInSingleTreeLayout_WPF.csproj","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/MultipleRootsInSingleTreeLayout/","Description":"The purpose of the MultipleRootsInSingleTreeLayout demot is to simulate TreeDown Layout which supports more than 1 root in one independent tree component in RadDiagram.\r\nHow it works ?\r\nYou choose multiple roots and add it in the Roots collection of the TreeLayoutSettings.\r\nOn a Button Click, a dummy root shape is created and dummy connections are created which connect the new root to the roots chosen by the user. The Layout is performed with the new root. After Layout is complete, the dummy connections and the dummy root are removed from the diagram.\r\nThis way, the root shapes user has selected are positioned with equal Y values (equal vertically) and they are on top of the rest of the diagram shapes.","KeyWords":"Multiple Roots In Single Tree Layout,  TreeLayoutSettings, topological, sort"},
{"Name":"MVVM","ExampleInfo":{"Name":"MVVM","DirectoryName":"MVVM","ExampleFileNames":["MVVM_WPF.csproj","App.config","App.xaml","App.xaml.cs","Brand.cs","CarsGraphSource.cs","Link.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Model.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/MVVM/","Description":"The sample demonstrates that you can easily use the RadDiagram framework with MVVM pattern. \r\nIt could serve as a starting point for your MVVM based Diagram applications.","KeyWords":"MVVM,  serializablegraphsourcebase, container, save, load"},
{"Name":"Org Chart","ExampleInfo":{"Name":"Org Chart","DirectoryName":"OrgChart","ExampleFileNames":["OrgChart_WPF.csproj","App.config","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","OrgChartExample.xaml","OrgChartExample.xaml.cs","Readme.md","Common\\HierarchicalDataTemplate.cs","Common\\PercentageConverter.cs","Converters\\ItemDisplayModeToFluidStateConverter.cs","Converters\\LayoutTypeToRotateAngleConverter.cs","Converters\\LayoutTypeToVisibilityConverter.cs","Converters\\ShapeBackgroundSelector.cs","Resources\\Resources.xaml","ViewModels\\Branch.cs","ViewModels\\GraphSource.cs","ViewModels\\ItemDisplayMode.cs","ViewModels\\Link.cs","ViewModels\\Node.cs","ViewModels\\OrgChartViewModel.cs","ViewModels\\OrgRouterViewModel.cs","ViewModels\\TreeLayoutViewModel.cs","XmlSource\\Organization.xml"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/OrgChart/","Description":"The Telerik OrgChart demo brings a great new visualization to organizational structures and hierarchies. \r\nDiagramOrgchart demonstrates the following RadDiagram  features:\r\n   - Shapes Layout. Different Layout types. Customizing the Layout with properties\r\n   - Connection Routing\r\n   - Custom Connectors\r\n   - Custom Templates changed with Semantic Zoom\r\n   - BringIntoView functionality\r\n   - Diagram NavigationPane\r\n   - Search for a node\r\n   - Animations when templates are changed","KeyWords":"Org Chart,  container, organization, hierarchy, root, tree, xml, graphsource, orgtreerouter, mvvm, bringintoview, semantic, zoom"},
{"Name":"Panning Without Using Ctrl","ExampleInfo":{"Name":"Panning Without Using Ctrl","DirectoryName":"PanningWithoutUsingCtrl","ExampleFileNames":["PanningWithoutUsingCtrl_WPF.csproj","app.config","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/PanningWithoutUsingCtrl/","Description":"The idea is to create a diagram in which panning happens without using the \"Ctrl\" button (only using the mouse) and holding the \"Shift\" button allows user to select items in the diagram (activates the PointerTool).","KeyWords":"Panning Without Using Ctrl,  pantool"},
{"Name":"Pascal Triangle","ExampleInfo":{"Name":"Pascal Triangle","DirectoryName":"PascalTriangle","ExampleFileNames":["PascalTriangle_WPF.csproj","App.xaml","App.xaml.cs","MainView.xaml","MainView.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","ViewModels\\PascalEdge.cs","ViewModels\\PascalNode.cs","ViewModels\\PascalTriangleGraphSource.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/PascalTriangle/","Description":"The sample demonstrates how you can create GraphSource with custom layout, based on your ViewModels instead of using built-in Diagram layouts.","KeyWords":"Pascal Triangle,  graphsource, mvvm"},
{"Name":"Paste On Mouse Position","ExampleInfo":{"Name":"Paste On Mouse Position","DirectoryName":"PasteOnMousePosition","ExampleFileNames":["DiagramCustomPaste.csproj","App.config","App.xaml","App.xaml.cs","CustomDiagram.cs","DiagramGraphSource.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/PasteOnMousePosition/","Description":"The Diagram Custom Paste Demonstrates thw following requested customizations / features:\r\n\t- Pasting on exact Mouse Position\r\n\t- Pasting connection on hovered Shape Connector attaches the coonnection to the connector\r\nThis is achieved with overriding the RadDiagram and its Paste() method. \r\nOn paste the copied items are pasted on the Mouse Position. If the Mouse is above a Shape Connector, the copied Connections are attached to this connector \r\nNote: The WPF version of this sample is created with Diagram bound to GraphSource. The SL version uses non-databound diagram.","KeyWords":"Paste On Mouse Position, SerializableGraphSourceBase, mvvm"},
{"Name":"Sort TreeLayout Shapes","ExampleInfo":{"Name":"Sort TreeLayout Shapes","DirectoryName":"SortTreeLayoutShapes","ExampleFileNames":["SortTreeLayoutShapes_WPF.csproj","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","OrgDiagram.cs","OrgItem.cs","OrgLink.cs","Readme.md","SortCriteria.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/SortTreeLayoutShapes/","Description":"The examples shows how you can sort the direct children of a shape in organizational diagrams.\r\nThis is achieved with inheritting RadDiagram, implementing IGraph interface and overriding Connections collection.","KeyWords":"Sort TreeLayout Shapes,  treedown, order, IGraph, async, headcount"},
{"Name":"Style Selectors","ExampleInfo":{"Name":"Style Selectors","DirectoryName":"StyleSelectors","ExampleFileNames":["StyleSelectors_WPF.csproj","App.xaml","App.xaml.cs","MainView.xaml","MainView.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Selectors\\LinkStyleSelector.cs","Selectors\\NodeStyleSelector.cs","ViewModels\\DecisionNode.cs","ViewModels\\EllipseNode.cs","ViewModels\\GraphSource.cs","ViewModels\\Link.cs","ViewModels\\MainViewModel.cs","ViewModels\\RectangleNode.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/StyleSelectors/","Description":"\nThis example demonstrates how to use MVVM to create a collection of shapes and connections in the RadDiagram control and take advantage of the ShapeStyleSelector and ConnectionStyleSelector properties to apply different styles on the shapes and the connections based on their type.","KeyWords":"Style Selectors"},
{"Name":"WinForms Integration","ExampleInfo":{"Name":"WinForms Integration","DirectoryName":"WinForm","ExampleFileNames":["WinForm_WPF.csproj","Form1.cs","Form1.Designer.cs","Form1.resx","Program.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Diagram/WinForm/","Description":"This sample demonstrates how you can easily host a RadDiagram inside a WinForms application.","KeyWords":"WinForms Integration,  host"}]