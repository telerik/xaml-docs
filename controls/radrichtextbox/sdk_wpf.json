[
  {
    "Name": "Change ribbons data context",
    "ExampleInfo": {
      "Name": "Change ribbons data context",
      "DirectoryName": "ChangeRibbonUIDataContext",
      "ExampleFileNames": [ "ChangeRibbonUIDataContext_WPF.csproj", "App.xaml", "App.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/ChangeRibbonUIDataContext/",
    "Description": "The example shows how the DataContext of RadRichTextBoxRIbbonUI can be changed run-time.",
    "KeyWords": "Change ribbons data context,  replace,ui"
  },
  {
    "Name": "Custom Caret",
    "ExampleInfo": {
      "Name": "Custom Caret",
      "DirectoryName": "CustomCaret",
      "ExampleFileNames": [ "CustomCaret_WPF.csproj", "app.config", "App.xaml", "App.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "SogouCaret.cs", "SogouCaretFactory.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomCaret/",
    "Description": "This example demonstrates how to handle the input in RadRichTextBox. When you inherit RadRichTextBox Caret object and override the appropriate methods, you get a full control of user's input.",
    "KeyWords": "Custom Caret,  replace, inherit"
  },
  {
    "Name": "Custom Code Formatting Language",
    "ExampleInfo": {
      "Name": "Custom Code Formatting Language",
      "DirectoryName": "CustomCodeFormattingLanguage",
      "ExampleFileNames": [ "CustomCodeFormattingLanguage_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "Keywords.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomCodeFormattingLanguage/",
    "Description": "The demo demonstrates how you can plug a custom formatting language which to be used in the Code dialog. Additional information about the Code Block feature can be found in the following article: http://www.telerik.com/help/silverlight/radrichtextbox-features-code-block.html/ http://www.telerik.com/help/wpf/radrichtextbox-features-code-block.html",
    "KeyWords": "Custom Code Formatting Language,  create,programming,language,highlight,syntax,keyword"
  },
  {
    "Name": "Custom Field",
    "ExampleInfo": {
      "Name": "Custom Field",
      "DirectoryName": "CustomField",
      "ExampleFileNames": [ "CustomField_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "CustomField.cs", "ExampleViewModel.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "SampleData\\SampleDocument.docx" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomField/",
    "Description": "\nThis example illustrates how to create custom field which calculates the total pages of the document and the current page number of a section. Regardless of the place where you have inserted the field at your document(Header, Footer, Body, FootNote, EndNote and etc.), you can obtain an information for the main document through its EvaluationContext property.",
    "KeyWords": "Custom Field"
  },
  {
    "Name": "Custom Find Replace Dialog",
    "ExampleInfo": {
      "Name": "Custom Find Replace Dialog",
      "DirectoryName": "CustomFindReplaceDialog",
      "ExampleFileNames": [ "CustomFindReplaceDialog_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "DocumentSelectReplaceStateService.cs", "FindReplaceDialog.xaml", "FindReplaceDialog.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "TelerikEditor.xaml", "TelerikEditor.xaml.cs", "TelerikHelper.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomFindReplaceDialog/",
    "Description": "This example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the attribute [CustomFindReplaceDialog].",
    "KeyWords": "Custom Find Replace Dialog,  replace, inherit, modify"
  },
  {
    "Name": "Custom floating block properties dialog",
    "ExampleInfo": {
      "Name": "Custom floating block properties dialog",
      "DirectoryName": "CustomFloatingBlockPropertiesDialogDemo",
      "ExampleFileNames": [ "CustomFloatingBlockPropertiesDialogDemo_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "CustomFloatingBlockPropertiesDialogWPF.xaml", "CustomFloatingBlockPropertiesDialogWPF.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "MyPositionProperties.xaml", "MyPositionProperties.xaml.cs", "MyTextWrappingProperties.xaml", "MyTextWrappingProperties.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomFloatingBlockPropertiesDialogDemo/",
    "Description": "This example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF. The FloatingBlockProperties dialog is invoked from the context menu when clicking on an image and selecting the Text Wrapping -> More Layout Options option.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the attribute [CustomFloatingBlockPropertiesDialog].",
    "KeyWords": "Custom floating block properties dialog,  replace, inherit, modify"
  },
  {
    "Name": "Custom Font Properties Dialog",
    "ExampleInfo": {
      "Name": "Custom Font Properties Dialog",
      "DirectoryName": "CustomFontPropertiesDialog",
      "ExampleFileNames": [ "CustomFontPropertiesDialog_WPF.csproj", "App_WPF.xaml", "App_WPF.xaml.cs", "FontPropertiesDialog.xaml", "FontPropertiesDialog.xaml.cs", "MainPage.xaml", "MainPage.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomFontPropertiesDialog/",
    "Description": "This example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the attribute [CustomFontPropertiesDialog].",
    "KeyWords": "Custom Font Properties Dialog,  replace, inherit, modify, style, styling"
  },
  {
    "Name": "Custom Image Editor Dialog",
    "ExampleInfo": {
      "Name": "Custom Image Editor Dialog",
      "DirectoryName": "CustomImageEditorDialog",
      "ExampleFileNames": [ "CustomImageEditorDialog_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "MyCustomImageEditorDialogWPF.xaml", "MyCustomImageEditorDialogWPF.xaml.cs", "SampleData\\RadRichTextBox.xaml" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomImageEditorDialog/",
    "Description": "This example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the attribute [CustomImageEditorDialog].",
    "KeyWords": "Custom Image Editor Dialog,  replace, inherit, modify"
  },
  {
    "Name": "Custom Insert Hyperlink Dialog",
    "ExampleInfo": {
      "Name": "Custom Insert Hyperlink Dialog",
      "DirectoryName": "CustomInsertHyperlinkDialog",
      "ExampleFileNames": [ "CustomInsertHyperlinkDialog_WPF.csproj", "App.xaml", "App.xaml.cs", "InsertHyperlinkDialog.xaml", "InsertHyperlinkDialog.xaml.cs", "MainPage.xaml", "MainPage.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomInsertHyperlinkDialog/",
    "Description": "This example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the respective attribute as [CustomInsertHyperlink].",
    "KeyWords": "Custom Insert Hyperlink Dialog,  replace, inherit, modify"
  },
  {
    "Name": "Custom Insert Table Dialog",
    "ExampleInfo": {
      "Name": "Custom Insert Table Dialog",
      "DirectoryName": "CustomInsertTableDialog",
      "ExampleFileNames": [ "CustomInsertTableDialog_WPF.csproj", "App.config", "App_WPF.xaml", "App_WPF.xaml.cs", "CustomInsertTableDialog.xaml", "CustomInsertTableDialog.xaml.cs", "MainPage.xaml", "MainPage.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomInsertTableDialog/",
    "Description": "This example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the respective attribute as [CustomInsertTableDialog].",
    "KeyWords": "Custom Insert Table Dialog,  replace, inherit, modify, style, styling"
  },
  {
    "Name": "Customize Commands",
    "ExampleInfo": {
      "Name": "Customize Commands",
      "DirectoryName": "CustomizeCommands",
      "ExampleFileNames": [ "CustomizeCommands.csproj", "App.xaml", "App.xaml.cs", "TelerikEditor.xaml", "TelerikEditor.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomizeCommands/",
    "Description": "This example demonstrates how you can use the CommandExecuting and CommandExecuted events to stop the execution of a command or change its default behavior. \r\nThe following customizations are shown:\r\n - The SaveCommand is cancelled and a different logic is implememted to change the default properties of the Save File dialog; \r\n - The InsertTableCommand is cancelled and tables cannot be inserted;\r\n - The PasteCommand is altered just before its execution so it only allows to paste plain text;\r\n - After executing InsertPictureCommand, the image is resized so it doesn't exceed 200px width.",
    "KeyWords": "Customize Commands,  behavior, save, implement"
  },

  {
    "Name": "Customize Paste",
    "ExampleInfo": {
      "Name": "Customize Paste",
      "DirectoryName": "CustomizePaste",
      "ExampleFileNames": [ "CustomizePaste.csproj", "App.config", "App.xaml", "App.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomizePaste/",
    "Description": "This example demonstrates how pasting can be customized in order to disbale and enable rich text paste.\r\nIn addition to reordering the format providers, it is also possible to attach to different events of the format providers and their settings.",
    "KeyWords": "Customize Paste,  replace, inherit, clipboard,handler"
  },
  {
    "Name": "Customize Printing",
    "ExampleInfo": {
      "Name": "Customize Printing",
      "DirectoryName": "CustomizePrinting",
      "ExampleFileNames": [ "CustomizePrinting_WPF.csproj", "App.xaml", "App.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomizePrinting/",
    "Description": "\nThe example demonstrates how to print silently with given printer. When you specify a printer name, the printer with the provided name will print the provided document silently. If the printer with the chosen name is not found, the default printer is being used.",
    "KeyWords": "Customize Printing"
  },
  {
    "Name": "Custom Layer And Custom Annotation",
    "ExampleInfo": {
      "Name": "Custom Layer And Custom Annotation",
      "DirectoryName": "CustomLayerAndCustomAnnotation",
      "ExampleFileNames": [ "CustomLayerAndCustomAnnotation_WPF.csproj", "App.config", "App_WPF.xaml", "App_WPF.xaml.cs", "CustomRangeEnd.cs", "CustomRangeLayer.cs", "CustomRangeStart.cs", "CustomUILayersBuilder.cs", "MainPage.xaml", "MainPage.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomLayerAndCustomAnnotation/",
    "Description": "This example demonstrates how to implement custom annotation range and vizualize it in a custom layer. The text box on the bottom of the view allows you to directly update the content of the first annotation in the document.",
    "KeyWords": "Custom Layer And Custom Annotation,  replace, inherit, modify, change,visualization,appearance"
  },
  {
    "Name": "Custom Paragraph Properties Dialog",
    "ExampleInfo": {
      "Name": "Custom Paragraph Properties Dialog",
      "DirectoryName": "CustomParagraphPropertiesDialog",
      "ExampleFileNames": [ "CustomParagraphPropertiesDialog_WPF.csproj", "App_WPF.xaml", "App_WPF.xaml.cs", "CustomParagraphPropertiesDialog.xaml", "CustomParagraphPropertiesDialog.xaml.cs", "MainPage.xaml", "MainPage.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomParagraphPropertiesDialog/",
    "Description": "This example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the respective attribute as [CustomParagraphPropertiesDialog].",
    "KeyWords": "Custom Paragraph Properties Dialog,  replace, inherit, modify,style,styling"
  },
  {
    "Name": "Custom Spell Checking Dialog",
    "ExampleInfo": {
      "Name": "Custom Spell Checking Dialog",
      "DirectoryName": "CustomSpellCheckingDialog",
      "ExampleFileNames": [ "CustomSpellCheckingDialog_WPF.csproj", "app.config", "App.xaml", "App.xaml.cs", "MainPage.xaml", "MainPage.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "SpellCheckingDialog.xaml", "SpellCheckingDialog.xaml.cs", "SpellCheckingDialog_WPF.xaml" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/CustomSpellCheckingDialog/",
    "Description": "This example illustrates how the default SpellCheckingDialog can be replaced by a custom one.",
    "KeyWords": "Custom Spell Checking Dialog,  replace, inherit, modify"
  },
  {
    "Name": "Data Binding",
    "ExampleInfo": {
      "Name": "Data Binding",
      "DirectoryName": "DataBinding",
      "ExampleFileNames": [ "DataBinding_WPF.csproj", "App_WPF.xaml", "App_WPF.xaml.cs", "ExampleDataContext.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/DataBinding/",
    "Description": "The current example demonstrates how you can bind the contents of RadRichTextBox to a property of your data source using the XamlDataProvider. More on format providers you can find here: http://www.telerik.com/help/wpf/radrichtextbox-features-data-providers.html.",
    "KeyWords": "Data Binding,  xaml,docx,openxml,rtf,html,txt,text,dataprovider,bind,mvvm"
  },
  {
    "Name": "Doc Format Provider Demo",
    "ExampleInfo": {
      "Name": "Doc Format Provider Demo",
      "DirectoryName": "DocFormatProviderDemo",
      "ExampleFileNames": [ "DocFormatProviderDemo.csproj", "App.config", "App.xaml", "App.xaml.cs", "DocFormatProvider.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "SampleData\\DocFormat.doc" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/DocFormatProviderDemo/",
    "Description": "\nThis example demonstrates how to import .doc files in RadRichTextBox. Please note that this format is currently not supported in the control and this example is using third-party library, which has limited capabilities and some documents may not be imported correctly.",
    "KeyWords": "Doc Format Provider Demo"
  },
  {
    "Name": "Drag and drop in editor",
    "ExampleInfo": {
      "Name": "Drag and drop in editor",
      "DirectoryName": "DragAndDropRRTB",
      "ExampleFileNames": [ "DragAndDropRRTB_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "MainPage.xaml", "MainPage.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/DragAndDropRRTB/",
    "Description": "This example demonstrates the way DragAndDropManager can be used with RadRichTextBox.\r\nIn the example, when you drag items from the TreeView into the editor, they get inserted at the appropriate position in the current editor.",
    "KeyWords": "Drag and drop in editor,  move"
  },
  {
    "Name": "Getting Started",
    "ExampleInfo": {
      "Name": "Getting Started",
      "DirectoryName": "GettingStarted",
      "ExampleFileNames": [ "GettingStarted_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "MainPage.xaml", "MainPage.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/GettingStarted/",
    "Description": "The sample demonstrates the basic scenario where you create a document from code and edit its formatting. It also complies with the Getting Started article.",
    "KeyWords": "Getting Started,  raddocument,document,editor,rich,how,to"
  },
  {
    "Name": "Localization",
    "ExampleInfo": {
      "Name": "Localization",
      "DirectoryName": "Localization",
      "ExampleFileNames": [ "Localization_WPF.csproj", "App.config", "App_WPF.xaml", "App_WPF.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "RadRichTextBoxResources.Designer.cs", "RadRichTextBoxResources.resx" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/Localization/",
    "Description": "The example shows how RadRichTextBox along with the predefined UI of the control can be localized. The RadRichTextBoxResources file contains all localizable strings. More about the approaches for localization you can find here: http://www.telerik.com/help/silverlight/radrichtextbox-localization.html.",
    "KeyWords": "Localization,  language"
  },
  {
    "Name": "Mail Merge",
    "ExampleInfo": {
      "Name": "Mail Merge",
      "DirectoryName": "MailMerge",
      "ExampleFileNames": [ "MailMerge_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "Employee.cs", "ExamplesDataContext.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "SampleData\\SampleDocument.xaml" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/MailMerge/",
    "Description": "This example illustrates the Mail Merge functionality of the control. The item source of the document contains information for the person sending the document, along with its picture.",
    "KeyWords": "Mail Merge,  mergefield,datasource,itemsource,template"
  },
  {
    "Name": "Merge Documents",
    "ExampleInfo": {
      "Name": "Merge Documents",
      "DirectoryName": "MergeDocuments",
      "ExampleFileNames": [ "MergeDocuments_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "MainPage.xaml", "MainPage.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/MergeDocuments/",
    "Description": "\nThis example demonstrates how multiple documents can be merged into one.\r\nAfter inserting each fragment in the merged document, the properties of the last section of the inserted piece are copied. This is done due to the fact that InsertFragment() does not copy the properties of the last section, but works as would copy/pasting do - places the caret after the inserted piece and takes the properties from the \"large\" document.",
    "KeyWords": "Merge Documents"
  },
  {
    "Name": "Microsoft Word spell checking",
    "ExampleInfo": {
      "Name": "Microsoft Word spell checking",
      "DirectoryName": "MsWordSpellChecking",
      "ExampleFileNames": [ "MsWordSpellChecking_WPF.csproj", "App.xaml", "App.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "packages.config", "WordSpellChecker.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/MsWordSpellChecking/",
    "Description": "The example demonstrates how to create and work with a custom third-party spell checker using Microsoft Word. This project requires Microsoft Office to be installed on the machine.",
    "KeyWords": "Microsoft Word spell checking,  check,third,party,dictionary"
  },
  {
    "Name": "NHunspell spell checking##\nThe example demonstrates how to create and work with a custom third-party spell checker using [NHunspell](http://www.crawler-lib.net/nhunspell).\n\n###Using OpenOffice dictionaries#",
    "ExampleInfo": {
      "Name": "NHunspell spell checking##\nThe example demonstrates how to create and work with a custom third-party spell checker using [NHunspell](http://www.crawler-lib.net/nhunspell).\n\n###Using OpenOffice dictionaries#",
      "DirectoryName": "NHunspellSpellChecking",
      "ExampleFileNames": [ "NHunspellSpellChecking_WPF.csproj", "App.xaml", "App.xaml.cs", "HunspellSpellChecker.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "ThirdPartyLibrary\\Dictionaries\\main.aff", "ThirdPartyLibrary\\Dictionaries\\main.dic" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/NHunspellSpellChecking/",
    "Description": "In order to open an .OXT dictionary file, you have to unzip it. This file contains .AFF and .DIC files, which have to be passed to the HunspellSpellChecker constructor to be used by the NHunspell library.\n\n* The dictionary used for this SDK example could be downloaded at http://extensions.openoffice.org/en/project/us-english-spell-checking-dictionary.",
    "KeyWords": "NHunspell spell checking##\nThe example demonstrates how to create and work with a custom third-party spell checker using [NHunspell](http://www.crawler-lib.net/nhunspell).\n\n###Using OpenOffice dictionaries#,  check,third,party,dictionary"
  },
  {
    "Name": "Plain Text Editor",
    "ExampleInfo": {
      "Name": "Plain Text Editor",
      "DirectoryName": "PlainTextEditor",
      "ExampleFileNames": [ "PlainTextEditor_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "CustomMenuBuilder.cs", "MainPage.xaml", "MainPage.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "RadMenuItemFactory.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/PlainTextEditor/",
    "Description": "The example demonstrates how to disable all rich-text editing capabilities and use RadRichTextBox as plain text editor.",
    "KeyWords": "Plain Text Editor,  disable,rich,text,edit"
  },
  {
    "Name": "Print Preview",
    "ExampleInfo": {
      "Name": "Print Preview",
      "DirectoryName": "PrintPreview",
      "ExampleFileNames": [ "PrintPreviewUsingRichTextBox_WPF.csproj", "App.config", "App_WPF.xaml", "App_WPF.xaml.cs", "MainPage.xaml", "MainPage.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/PrintPreview/",
    "Description": "\nThis example demonstrates how to implement Print Preview functionality using RadRichTextBox.",
    "KeyWords": "Print Preview"
  },
  {
    "Name": "RadToolBar UI",
    "ExampleInfo": {
      "Name": "RadToolBar UI",
      "DirectoryName": "RadToolBarUI",
      "ExampleFileNames": [ "RadToolBarUI.csproj", "App.config", "App.xaml", "App.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/RadToolBarUI/",
    "Description": "\r\nThis example shows how RadToolBar can be used instead of the default RadRichTextBoxRibbonUI in order to achieve a simpler overall look. ",
    "KeyWords": "RadToolBar UI"
  },
  {
    "Name": "Save And Save As",
    "ExampleInfo": {
      "Name": "Save And Save As",
      "DirectoryName": "SaveAndSaveAs",
      "ExampleFileNames": [ "SaveAndSaveAs_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/SaveAndSaveAs/",
    "Description": "The example demonstrates how to implement Save functionality as opposite to Save As.",
    "KeyWords": "Save And Save As,  keep"
  },
  {
    "Name": "Search And Highlight",
    "ExampleInfo": {
      "Name": "Search And Highlight",
      "DirectoryName": "SearchAndHighlight",
      "ExampleFileNames": [ "SearchAndHighlight_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "HighlighSearchedPhraseUILayersBuilder.cs", "HighlightSearchedWordLayer.cs", "MainPage.xaml", "MainPage.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/SearchAndHighlight/",
    "Description": "This example demonstrates how the search and position functionality can be used to create a custom UI layer that highlights all occurrences of the searched text.",
    "KeyWords": "Search And Highlight,  custom,ui,layer,position,document,text"
  },
  {
    "Name": "Simulate Watermark",
    "ExampleInfo": {
      "Name": "Simulate Watermark",
      "DirectoryName": "SimulateWatermark",
      "ExampleFileNames": [ "SimulateWatermark_WPF.csproj", "App.xaml", "App.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "WatermarkRadRichTextBox.xaml", "WatermarkRadRichTextBox.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/SimulateWatermark/",
    "Description": "This example demonstrates how you can strip the rich-text formatting options of RadRichTextBox and place text in it when the control is empty (similar to RadWatermarkTextBox).",
    "KeyWords": "Simulate Watermark,  strip,rich,text"
  },
  {
    "Name": "Telerik Editor",
    "ExampleInfo": {
      "Name": "Telerik Editor",
      "DirectoryName": "TelerikEditor",
      "ExampleFileNames": [ "TelerikEditorDemo_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "TelerikEditor.xaml", "TelerikEditor.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/TelerikEditor/",
    "Description": "This example demonstrates how the commands can be wired with RadRichTextBoxRibbonUI in order to be able to utilize all of the functionality of the control through a well-known user interface.",
    "KeyWords": "Telerik Editor,  commands,ribbon,ui"
  },
  {
    "Name": "Thread Safe Document Conversion",
    "ExampleInfo": {
      "Name": "Thread Safe Document Conversion",
      "DirectoryName": "ThreadSafeDocumentConversion",
      "ExampleFileNames": [ "ThreadSafeDocumentConversion.csproj", "App.config", "App.xaml", "App.xaml.cs", "FormatProviderPair.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "ThreadParameters.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/ThreadSafeDocumentConversion/",
    "Description": "This example demonstrates how DocxFormatProvider, HtmlFormatProvider, RtfFormatProvider and XamlFormatProvider can be used in a thread safe scenario for document conversion.",
    "KeyWords": "Thread Safe Document Conversion,  xaml,docx,openxml,html,rtf,formatprovider,save,import,export"
  },
  {
    "Name": "Watermark",
    "ExampleInfo": {
      "Name": "Watermark",
      "DirectoryName": "Watermark",
      "ExampleFileNames": [ "Watermark_WPF.csproj", "App.config", "App.xaml", "App.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "TelerikEditor.xaml", "TelerikEditor.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/Watermark/",
    "Description": "\nThe example demonstrates how to create and apply a watermark from code.",
    "KeyWords": "Watermark"
  },
  {
    "Name": "Windows Metafile Format Image Decoder",
    "ExampleInfo": {
      "Name": "Windows Metafile Format Image Decoder",
      "DirectoryName": "WindowsMetafileFormatImageDecoder",
      "ExampleFileNames": [ "WindowsMetafileFormatImageDecoder.csproj", "App.xaml", "App.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "WindowsMetafileFormatImageDecoder.cs", "SampleData\\sampleDocument.docx", "ViewModel\\ExampleViewModel.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/WindowsMetafileFormatImageDecoder/",
    "Description": "This examples demonstrates how documents containing EMF or WMF images can be imported. It uses a custom WindowsMetafile image decoder class, registered later in the ImageCodecManager of the RadRichTextBox.",
    "KeyWords": "Windows Metafile Format Image Decoder,  EMF, WMF, custom"
  },
  {
    "Name": "Working With Rad Document Editor",
    "ExampleInfo": {
      "Name": "Working With Rad Document Editor",
      "DirectoryName": "WorkingWithRadDocumentEditor",
      "ExampleFileNames": [ "WorkingWithRadDocumentEditor_WPF.csproj", "App.config", "App_WPF.xaml", "App_WPF.xaml.cs", "MainWindow.xaml", "MainWindow.xaml.cs" ]
    },
    "GitHubPath": "https://api.github.com/repos/telerik/xaml-sdk/contents/RichTextBox/WorkingWithRadDocumentEditor/",
    "Description": "Working with RadDocumentEditor\r\nThis example demonstrates how to use RadDocumentEditor's API to create a document containing header, footer, numbered list, image, field and table of contents.",
    "KeyWords": "Working With Rad Document Editor,  api,manipulate,editing,header, footer, numbered, list, image, field,table of contents,toc"
  }
]
