[{"Name":"Change ribbons data context","ExampleInfo":{"Name":"Change ribbons data context","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\ChangeRibbonUIDataContext\\ChangeRibbonUIDataContext_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\ChangeRibbonUIDataContext\\Readme.md","DirectoryName":"ChangeRibbonUIDataContext","ExampleFileNames":["ChangeRibbonUIDataContext_WPF.csproj","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/ChangeRibbonUIDataContext/","Description":"\r\nThe example shows how the DataContext of RadRichTextBoxRIbbonUI can be changed run-time.","KeyWords":"Change ribbons data context"},
{"Name":"Custom Caret","ExampleInfo":{"Name":"Custom Caret","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\CustomCaret\\CustomCaret_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\CustomCaret\\Readme.md","DirectoryName":"CustomCaret","ExampleFileNames":["CustomCaret_WPF.csproj","app.config","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","SogouCaret.cs","SogouCaretFactory.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/CustomCaret/","Description":"\nThis example demonstrates how to handle the input in RadRichTextBox. When you inherit RadRichTextBox Caret object and override the appropriate methods, you get a full control of user's input.","KeyWords":"Custom Caret"},
{"Name":"Custom Code Formatting Language","ExampleInfo":{"Name":"Custom Code Formatting Language","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\CustomCodeFormattingLanguage\\CustomCodeFormattingLanguage_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\CustomCodeFormattingLanguage\\Readme.md","DirectoryName":"CustomCodeFormattingLanguage","ExampleFileNames":["CustomCodeFormattingLanguage_WPF.csproj","App.config","App.xaml","App.xaml.cs","Keywords.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/CustomCodeFormattingLanguage/","Description":"\nThe demo demonstrates how you can plug a custom formatting language which to be used in the Code dialog. Additional information about the Code Block feature can be found in the following article: http://www.telerik.com/help/silverlight/radrichtextbox-features-code-block.html/ http://www.telerik.com/help/wpf/radrichtextbox-features-code-block.html","KeyWords":"Custom Code Formatting Language"},
{"Name":"Custom Field","ExampleInfo":{"Name":"Custom Field","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\CustomField\\CustomField_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\CustomField\\Readme.md","DirectoryName":"CustomField","ExampleFileNames":["CustomField_WPF.csproj","App.config","App.xaml","App.xaml.cs","CustomField.cs","ExampleViewModel.cs","MainWindow.xaml","MainWindow.xaml.cs","SampleData\\SampleDocument.docx"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/CustomField/","Description":"\nThis example illustrates how to create custom field which calculates the total pages of the document and the current page number of a section. Regardless of the place where you have inserted the field at your document(Header, Footer, Body, FootNote, EndNote and etc.), you can obtain an information for the main document through its EvaluationContext property.","KeyWords":"Custom Field"},
{"Name":"Custom Find Replace Dialog","ExampleInfo":{"Name":"Custom Find Replace Dialog","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\CustomFindReplaceDialog\\CustomFindReplaceDialog_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\CustomFindReplaceDialog\\Readme.md","DirectoryName":"CustomFindReplaceDialog","ExampleFileNames":["CustomFindReplaceDialog_WPF.csproj","App.config","App.xaml","App.xaml.cs","DocumentSelectReplaceStateService.cs","FindReplaceDialog.xaml","FindReplaceDialog.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","TelerikEditor.xaml","TelerikEditor.xaml.cs","TelerikHelper.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/CustomFindReplaceDialog/","Description":"\nThis example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the attribute [CustomFindReplaceDialog].","KeyWords":"Custom Find Replace Dialog"},
{"Name":"Custom floating block properties dialog","ExampleInfo":{"Name":"Custom floating block properties dialog","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\CustomFloatingBlockPropertiesDialogDemo\\CustomFloatingBlockPropertiesDialogDemo_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\CustomFloatingBlockPropertiesDialogDemo\\Readme.md","DirectoryName":"CustomFloatingBlockPropertiesDialogDemo","ExampleFileNames":["CustomFloatingBlockPropertiesDialogDemo_WPF.csproj","App.config","App.xaml","App.xaml.cs","CustomFloatingBlockPropertiesDialogWPF.xaml","CustomFloatingBlockPropertiesDialogWPF.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","MyPositionProperties.xaml","MyPositionProperties.xaml.cs","MyTextWrappingProperties.xaml","MyTextWrappingProperties.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/CustomFloatingBlockPropertiesDialogDemo/","Description":"\r\nThis example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF. The FloatingBlockProperties dialog is invoked from the context menu when clicking on an image and selecting the Text Wrapping -> More Layout Options option.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the attribute [CustomFloatingBlockPropertiesDialog].","KeyWords":"Custom floating block properties dialog"},
{"Name":"Custom Font Properties Dialog","ExampleInfo":{"Name":"Custom Font Properties Dialog","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\CustomFontPropertiesDialog\\CustomFontPropertiesDialog_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\CustomFontPropertiesDialog\\ReadMe.md","DirectoryName":"CustomFontPropertiesDialog","ExampleFileNames":["CustomFontPropertiesDialog_WPF.csproj","App_WPF.xaml","App_WPF.xaml.cs","FontPropertiesDialog.xaml","FontPropertiesDialog.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/CustomFontPropertiesDialog/","Description":"\nThis example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the attribute [CustomFontPropertiesDialog].","KeyWords":"Custom Font Properties Dialog"},
{"Name":"Custom Image Editor Dialog","ExampleInfo":{"Name":"Custom Image Editor Dialog","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\CustomImageEditorDialog\\CustomImageEditorDialog_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\CustomImageEditorDialog\\Readme.md","DirectoryName":"CustomImageEditorDialog","ExampleFileNames":["CustomImageEditorDialog_WPF.csproj","App.config","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","MyCustomImageEditorDialogWPF.xaml","MyCustomImageEditorDialogWPF.xaml.cs","SampleData\\RadRichTextBox.xaml"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/CustomImageEditorDialog/","Description":"\nThis example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the attribute [CustomImageEditorDialog].","KeyWords":"Custom Image Editor Dialog"},
{"Name":"Custom Insert Hyperlink Dialog","ExampleInfo":{"Name":"Custom Insert Hyperlink Dialog","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\CustomInsertHyperlinkDialog\\CustomInsertHyperlinkDialog_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\CustomInsertHyperlinkDialog\\Readme.md","DirectoryName":"CustomInsertHyperlinkDialog","ExampleFileNames":["CustomInsertHyperlinkDialog_WPF.csproj","App.xaml","App.xaml.cs","InsertHyperlinkDialog.xaml","InsertHyperlinkDialog.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/CustomInsertHyperlinkDialog/","Description":"\nThis example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the respective attribute as [CustomInsertHyperlink].","KeyWords":"Custom Insert Hyperlink Dialog"},
{"Name":"Custom Insert Table Dialog","ExampleInfo":{"Name":"Custom Insert Table Dialog","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\CustomInsertTableDialog\\CustomInsertTableDialog_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\CustomInsertTableDialog\\Readme.md","DirectoryName":"CustomInsertTableDialog","ExampleFileNames":["CustomInsertTableDialog_WPF.csproj","App.config","App_WPF.xaml","App_WPF.xaml.cs","CustomInsertTableDialog.xaml","CustomInsertTableDialog.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/CustomInsertTableDialog/","Description":"\nThis example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the respective attribute as [CustomInsertTableDialog].","KeyWords":"Custom Insert Table Dialog"},
{"Name":"Customize Paste","ExampleInfo":{"Name":"Customize Paste","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\CustomizePaste\\CustomizePaste.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\CustomizePaste\\Readme.md","DirectoryName":"CustomizePaste","ExampleFileNames":["CustomizePaste.csproj","App.config","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/CustomizePaste/","Description":"\nThis example demonstrates how pasting can be customized in order to disbale and enable rich text paste.\r\nIn addition to reordering the format providers, it is also possible to attach to different events of the format providers and their settings.","KeyWords":"Customize Paste"},
{"Name":"Customize Printing","ExampleInfo":{"Name":"Customize Printing","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\CustomizePrinting\\CustomizePrinting_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\CustomizePrinting\\Readme.md","DirectoryName":"CustomizePrinting","ExampleFileNames":["CustomizePrinting_WPF.csproj","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/CustomizePrinting/","Description":"\nThe example demonstrates how to print silently with given printer. When you specify a printer name, the printer with the provided name will print the provided document silently. If the printer with the chosen name is not found, the default printer is being used.","KeyWords":"Customize Printing"},
{"Name":"Custom Layer And Custom Annotation","ExampleInfo":{"Name":"Custom Layer And Custom Annotation","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\CustomLayerAndCustomAnnotation\\CustomLayerAndCustomAnnotation_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\CustomLayerAndCustomAnnotation\\Readme.md","DirectoryName":"CustomLayerAndCustomAnnotation","ExampleFileNames":["CustomLayerAndCustomAnnotation_WPF.csproj","App.config","App_WPF.xaml","App_WPF.xaml.cs","CustomRangeEnd.cs","CustomRangeLayer.cs","CustomRangeStart.cs","CustomUILayersBuilder.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/CustomLayerAndCustomAnnotation/","Description":"\nThis example demonstrates how to implement custom annotation range and vizualize it in a custom layer. The text box on the bottom of the view allows you to directly update the content of the first annotation in the document.","KeyWords":"Custom Layer And Custom Annotation"},
{"Name":"Custom Paragraph Properties Dialog","ExampleInfo":{"Name":"Custom Paragraph Properties Dialog","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\CustomParagraphPropertiesDialog\\CustomParagraphPropertiesDialog_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\CustomParagraphPropertiesDialog\\Readme.md","DirectoryName":"CustomParagraphPropertiesDialog","ExampleFileNames":["CustomParagraphPropertiesDialog_WPF.csproj","App_WPF.xaml","App_WPF.xaml.cs","CustomParagraphPropertiesDialog.xaml","CustomParagraphPropertiesDialog.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/CustomParagraphPropertiesDialog/","Description":"\nThis example demonstrates how custom dialogs can be created and wired to work with the commands of the editor using MEF.\r\nNote that all that is needed to have the commands of the editor use the custom dialog is to implement the respective interface and mark the class with the respective attribute as [CustomParagraphPropertiesDialog].","KeyWords":"Custom Paragraph Properties Dialog"},
{"Name":"Custom Spell Checking Dialog","ExampleInfo":{"Name":"Custom Spell Checking Dialog","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\CustomSpellCheckingDialog\\CustomSpellCheckingDialog_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\CustomSpellCheckingDialog\\Readme.md","DirectoryName":"CustomSpellCheckingDialog","ExampleFileNames":["CustomSpellCheckingDialog_WPF.csproj","app.config","App.xaml","App.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","SpellCheckingDialog.xaml","SpellCheckingDialog.xaml.cs","SpellCheckingDialog_WPF.xaml"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/CustomSpellCheckingDialog/","Description":"\nThis example illustrates how the default SpellCheckingDialog can be replaced by a custom one.","KeyWords":"Custom Spell Checking Dialog"},
{"Name":"Data Binding","ExampleInfo":{"Name":"Data Binding","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\DataBinding\\DataBinding_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\DataBinding\\Readme.md","DirectoryName":"DataBinding","ExampleFileNames":["DataBinding_WPF.csproj","App_WPF.xaml","App_WPF.xaml.cs","ExampleDataContext.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/DataBinding/","Description":"\nThe current example demonstrates how you can bind the contents of RadRichTextBox to a property of your data source using the XamlDataProvider. More on format providers you can find here: http://www.telerik.com/help/wpf/radrichtextbox-features-data-providers.html.","KeyWords":"Data Binding"},
{"Name":"Doc Format Provider Demo","ExampleInfo":{"Name":"Doc Format Provider Demo","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\DocFormatProviderDemo\\DocFormatProviderDemo.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\DocFormatProviderDemo\\Readme.md","DirectoryName":"DocFormatProviderDemo","ExampleFileNames":["DocFormatProviderDemo.csproj","App.config","App.xaml","App.xaml.cs","DocFormatProvider.cs","MainWindow.xaml","MainWindow.xaml.cs","SampleData\\DocFormat.doc"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/DocFormatProviderDemo/","Description":"\nThis example demonstrates how to import .doc files in RadRichTextBox. Please note that this format is currently not supported in the control and this example is using third-party library, which has limited capabilities and some documents may not be imported correctly.","KeyWords":"Doc Format Provider Demo"},
{"Name":"Drag and drop in editor","ExampleInfo":{"Name":"Drag and drop in editor","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\DragAndDropRRTB\\DragAndDropRRTB_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\DragAndDropRRTB\\Readme.md","DirectoryName":"DragAndDropRRTB","ExampleFileNames":["DragAndDropRRTB_WPF.csproj","App.config","App.xaml","App.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/DragAndDropRRTB/","Description":"\r\nThis example demonstrates the way DragAndDropManager can be used with RadRichTextBox.\r\nIn the example, when you drag items from the TreeView into the editor, they get inserted at the appropriate position in the current editor.","KeyWords":"Drag and drop in editor"},
{"Name":"Getting Started","ExampleInfo":{"Name":"Getting Started","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\GettingStarted\\GettingStarted_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\GettingStarted\\Readme.md","DirectoryName":"GettingStarted","ExampleFileNames":["GettingStarted_WPF.csproj","App.config","App.xaml","App.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/GettingStarted/","Description":"\nThe sample demonstrates the basic scenario where you create a document from code and edit its formatting. It also complies with the Getting Started article.","KeyWords":"Getting Started"},
{"Name":"Localization","ExampleInfo":{"Name":"Localization","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\Localization\\Localization_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\Localization\\Readme.md","DirectoryName":"Localization","ExampleFileNames":["Localization_WPF.csproj","App.config","App_WPF.xaml","App_WPF.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","RadRichTextBoxResources.Designer.cs","RadRichTextBoxResources.resx"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/Localization/","Description":"\nThe example shows how RadRichTextBox along with the predefined UI of the control can be localized. The RadRichTextBoxResources file contains all localizable strings. More about the approaches for localization you can find here: http://www.telerik.com/help/silverlight/radrichtextbox-localization.html. ","KeyWords":"Localization"},
{"Name":"Mail Merge","ExampleInfo":{"Name":"Mail Merge","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\MailMerge\\MailMerge_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\MailMerge\\Readme.md","DirectoryName":"MailMerge","ExampleFileNames":["MailMerge_WPF.csproj","App.config","App.xaml","App.xaml.cs","Employee.cs","ExamplesDataContext.cs","MainWindow.xaml","MainWindow.xaml.cs","SampleData\\SampleDocument.xaml"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/MailMerge/","Description":"\nThis example illustrates the Mail Merge functionality of the control. The item source of the document contains information for the person sending the document, along with its picture.","KeyWords":"Mail Merge"},
{"Name":"Merge Documents","ExampleInfo":{"Name":"Merge Documents","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\MergeDocuments\\MergeDocuments_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\MergeDocuments\\Readme.md","DirectoryName":"MergeDocuments","ExampleFileNames":["MergeDocuments_WPF.csproj","App.config","App.xaml","App.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/MergeDocuments/","Description":"\nThis example demonstrates how multiple documents can be merged into one.\r\nAfter inserting each fragment in the merged document, the properties of the last section of the inserted piece are copied. This is done due to the fact that InsertFragment() does not copy the properties of the last section, but works as would copy/pasting do - places the caret after the inserted piece and takes the properties from the \"large\" document.","KeyWords":"Merge Documents"},
{"Name":"Plain Text Editor","ExampleInfo":{"Name":"Plain Text Editor","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\PlainTextEditor\\PlainTextEditor_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\PlainTextEditor\\Readme.md","DirectoryName":"PlainTextEditor","ExampleFileNames":["PlainTextEditor_WPF.csproj","App.config","App.xaml","App.xaml.cs","CustomMenuBuilder.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","RadMenuItemFactory.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/PlainTextEditor/","Description":"\nThe example demonstrates how to disable all rich-text editing capabilities and use RadRichTextBox as plain text editor.","KeyWords":"Plain Text Editor"},
{"Name":"Print Preview","ExampleInfo":{"Name":"Print Preview","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\PrintPreview\\PrintPreviewUsingRichTextBox_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\PrintPreview\\Readme.md","DirectoryName":"PrintPreview","ExampleFileNames":["PrintPreviewUsingRichTextBox_WPF.csproj","App.config","App_WPF.xaml","App_WPF.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/PrintPreview/","Description":"\nThis example demonstrates how to implement Print Preview functionality using RadRichTextBox.","KeyWords":"Print Preview"},
{"Name":"RadToolBar UI","ExampleInfo":{"Name":"RadToolBar UI","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\RadToolBarUI\\RadToolBarUI.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\RadToolBarUI\\Readme.md","DirectoryName":"RadToolBarUI","ExampleFileNames":["RadToolBarUI.csproj","App.config","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/RadToolBarUI/","Description":"\r\nThis example shows how RadToolBar can be used instead of the default RadRichTextBoxRibbonUI in order to achieve a simpler overall look. ","KeyWords":"RadToolBar UI"},
{"Name":"Save And Save As","ExampleInfo":{"Name":"Save And Save As","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\SaveAndSaveAs\\SaveAndSaveAs_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\SaveAndSaveAs\\Readme.md","DirectoryName":"SaveAndSaveAs","ExampleFileNames":["SaveAndSaveAs_WPF.csproj","App.config","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/SaveAndSaveAs/","Description":"\nThe example demonstrates how to implement Save functionality as opposite to Save As.","KeyWords":"Save And Save As"},
{"Name":"Search And Highlight","ExampleInfo":{"Name":"Search And Highlight","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\SearchAndHighlight\\SearchAndHighlight_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\SearchAndHighlight\\Readme.md","DirectoryName":"SearchAndHighlight","ExampleFileNames":["SearchAndHighlight_WPF.csproj","App.config","App.xaml","App.xaml.cs","HighlighSearchedPhraseUILayersBuilder.cs","HighlightSearchedWordLayer.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/SearchAndHighlight/","Description":"\nThis example demonstrates how the search and position functionality can be used to create a custom UI layer that highlights all occurrences of the searched text.","KeyWords":"Search And Highlight"},
{"Name":"Simulate Watermark","ExampleInfo":{"Name":"Simulate Watermark","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\SimulateWatermark\\SimulateWatermark_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\SimulateWatermark\\Readme.md","DirectoryName":"SimulateWatermark","ExampleFileNames":["SimulateWatermark_WPF.csproj","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","WatermarkRadRichTextBox.xaml","WatermarkRadRichTextBox.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/SimulateWatermark/","Description":"\nThis example demonstrates how you can strip the rich-text formatting options of RadRichTextBox and place text in it when the control is empty (similar to RadWatermarkTextBox).","KeyWords":"Simulate Watermark"},
{"Name":"Telerik Editor","ExampleInfo":{"Name":"Telerik Editor","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\TelerikEditor\\TelerikEditorDemo_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\TelerikEditor\\Readme.md","DirectoryName":"TelerikEditor","ExampleFileNames":["TelerikEditorDemo_WPF.csproj","App.config","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","TelerikEditor.xaml","TelerikEditor.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/TelerikEditor/","Description":"\nThis example demonstrates how the commands can be wired with RadRichTextBoxRibbonUI in order to be able to utilize all of the functionality of the control through a well-known user interface.","KeyWords":"Telerik Editor"},
{"Name":"Thread Safe Document Conversion","ExampleInfo":{"Name":"Thread Safe Document Conversion","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\ThreadSafeDocumentConversion\\ThreadSafeDocumentConversion.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\ThreadSafeDocumentConversion\\Readme.md","DirectoryName":"ThreadSafeDocumentConversion","ExampleFileNames":["ThreadSafeDocumentConversion.csproj","App.config","App.xaml","App.xaml.cs","FormatProviderPair.cs","MainWindow.xaml","MainWindow.xaml.cs","ThreadParameters.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/ThreadSafeDocumentConversion/","Description":"\nThis example demonstrates how DocxFormatProvider, HtmlFormatProvider, RtfFormatProvider and XamlFormatProvider can be used in a thread safe scenario for document conversion.","KeyWords":"Thread Safe Document Conversion"},
{"Name":"Watermark","ExampleInfo":{"Name":"Watermark","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\Watermark\\Watermark_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\Watermark\\Readme.md","DirectoryName":"Watermark","ExampleFileNames":["Watermark_WPF.csproj","App.config","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","TelerikEditor.xaml","TelerikEditor.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/Watermark/","Description":"\nThe example demonstrates how to create and apply a watermark from code.","KeyWords":"Watermark"},
{"Name":"Windows Metafile Format Image Decoder","ExampleInfo":{"Name":"Windows Metafile Format Image Decoder","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\WindowsMetafileFormatImageDecoder\\WindowsMetafileFormatImageDecoder.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\WindowsMetafileFormatImageDecoder\\Readme.md","DirectoryName":"WindowsMetafileFormatImageDecoder","ExampleFileNames":["WindowsMetafileFormatImageDecoder.csproj","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","WindowsMetafileFormatImageDecoder.cs","SampleData\\sampleDocument.docx","ViewModel\\ExampleViewModel.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/WindowsMetafileFormatImageDecoder/","Description":"\nThis examples demonstrates how documents containing EMF or WMF images can be imported. It uses a custom WindowsMetafile image decoder class, registered later in the ImageCodecManager of the RadRichTextBox.","KeyWords":"Windows Metafile Format Image Decoder"},
{"Name":"Working With Rad Document Editor","ExampleInfo":{"Name":"Working With Rad Document Editor","ProjectPath":"C:\\SDK-details-repository\\RichTextBox\\WorkingWithRadDocumentEditor\\WorkingWithRadDocumentEditor_WPF.csproj","ReadmePath":"C:\\SDK-details-repository\\RichTextBox\\WorkingWithRadDocumentEditor\\ReadMe.md","DirectoryName":"WorkingWithRadDocumentEditor","ExampleFileNames":["WorkingWithRadDocumentEditor_WPF.csproj","App.config","App_WPF.xaml","App_WPF.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://raw.githubusercontent.com/telerik/xaml-sdk/master/RichTextBox/WorkingWithRadDocumentEditor/","Description":"\nWorking with RadDocumentEditor\r\nThis example demonstrates how to use RadDocumentEditor's API to create a document containing header, footer, numbered list, image, field and table of contents.","KeyWords":"Working With Rad Document Editor"}]