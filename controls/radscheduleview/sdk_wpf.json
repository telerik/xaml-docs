[{"Name":"AgendaViewDefinition","ExampleInfo":{"Name":"AgendaViewDefinition","DirectoryName":"AgendaViewDefinition","ExampleFileNames":["AgendaViewDefinition_WPF.csproj","App.config","App.xaml","App.xaml.cs","CustomAgendaViewDefinition.cs","Example.xaml","Example.xaml.cs","InvertedAgendaViewDefinitionToVisibilityConverter.cs","MainWindow.xaml","MainWindow.xaml.cs","MyViewModel.cs","Readme.md","ViewDefinitionToVisibilityConverter.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/AgendaViewDefinition/","Description":"Agenda ViewDefinition \r\n\r\nWith the __R1 2020__ release a __built-in AgendaViewDefinition__ was introduced in RadScheduleView for WPF. Read more about this in the [Agenda View](https://docs.telerik.com/devtools/wpf/controls/radscheduleview/features/viewdefinitions/agenda-view-definition) article.\r\n\r\nThis example demonstrates how to implement an Agenda ViewDefinition for RadScheduleView using RadListBox.\r\n\r\n[//]:","KeyWords":"AgendaViewDefinition,  dayviewdefinition, custom, listbox, appointments"},
{"Name":"AppointmentColorBasedOnResource","ExampleInfo":{"Name":"AppointmentColorBasedOnResource","DirectoryName":"AppointmentColorBasedOnResource","ExampleFileNames":["AppointmentColorBasedOnResource_WPF.csproj","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ResourcesToResourceConverter.cs","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/AppointmentColorBasedOnResource/","Description":"Appointment Color Based On Resource\nThis example demonstrates how you can apply different color for the same appointment according to the assigned resources.\n\n[//]:","KeyWords":"AppointmentColorBasedOnResource,  appointmentitemcontenttemplate, converter, appointmenttemplate"},
{"Name":"AppointmentsReminders","ExampleInfo":{"Name":"AppointmentsReminders","DirectoryName":"AppointmentsReminders","ExampleFileNames":["AppointmentsReminders_WPF.csproj","app.config","App.xaml","App.xaml.cs","CustomAppointment.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ReminderWindow.xaml","ReminderWindow.xaml.cs","ReminderWindowViewModel.cs","TimeSpanToStringConverter.cs","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/AppointmentsReminders/","Description":"Appointments Reminders\nThis example demonstrates how to implement reminders for the appointments in RadScheduleView for Silverlight and WPF.\n\n[//]:","KeyWords":"AppointmentsReminders,  appointmentitemcontenttemplate, editappointmentdialogstyle, appointmenttemplate, snooze, dismiss"},
{"Name":"AvoidOverlappingAppointments","ExampleInfo":{"Name":"AvoidOverlappingAppointments","DirectoryName":"AvoidOverlappingAppointments","ExampleFileNames":["AvoidOverlappingAppointments_WPF.csproj","App.config","App.xaml","App.xaml.cs","ConflictCheckingDragDropBehavior.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/AvoidOverlappingAppointments/","Description":"Avoid Overlapping Appointments\r\nThis example demonstrates how you could prevent overlapping appointments when drag-and-drop or resize an appointment. In order to achieve it you should create a custom DragDropBehavior and check in CanDrop and CanResize methods whether the destination slot contains any appointments. Additionally, you should customize the RecurrenceChoiceDragDropDialog to handle the case when a whole series of a recurrent appointment is dragged.\r\n\r\n[//]:","KeyWords":"AvoidOverlappingAppointments,  dragdropbehavior, conflictchecking, recurrencechoicedragdropdialogstyle, recurrencechoiceresizedialogstyle, recurrent"},
{"Name":"ChangeResizeCursorDuringResize","ExampleInfo":{"Name":"ChangeResizeCursorDuringResize","DirectoryName":"ChangeResizeCursorDuringResize","ExampleFileNames":["ChangeResizeCursorAtRuntime_WPF.csproj","App.config","App.xaml","App.xaml.cs","CustomScheduleViewDragDropBehavior.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/ChangeResizeCursorDuringResize/","Description":"Change ResizeCursor During Resize\r\nThis example demonstrates how to easily change the resize cursor of RadScheduleView while resizing an appointment. Start resizing an appointment and notice how the cursor changes when resizing is not possible.\r\n\r\n[//]:","KeyWords":"ChangeResizeCursorDuringResize,  DragDropBehavior"},
{"Name":"CustomCurrentTimeIndicatorStyle","ExampleInfo":{"Name":"CustomCurrentTimeIndicatorStyle","DirectoryName":"CustomCurrentTimeIndicatorStyle","ExampleFileNames":["CustomCurrentTimeIndicatorStyle_WPF.csproj","App.config","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/CustomCurrentTimeIndicatorStyle/","Description":"Custom CurrentTimeIndicator Style\r\nThis example demonstrates how you could easily customize the appearance of the CurrentTimeIndicator of RadScheduleView using the CurrentTimeIndicatorStyle and CurrentTimeIndicatorAppointmentsAreaStyle properties.\r\n\r\n[//]:","KeyWords":"CustomCurrentTimeIndicatorStyle, currenttimeindicatorappointmentsareastyle"},
{"Name":"CustomDragDropBehavior","ExampleInfo":{"Name":"CustomDragDropBehavior","DirectoryName":"CustomDragDropBehavior","ExampleFileNames":["CustomDragDropBehavior_WPF.csproj","App.xaml","App.xaml.cs","AppointmentToCustomerConverter.cs","CustomAppointment.cs","CustomScheduleViewDragDropBehavior.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Meeting.cs","Readme.md","ReadOnlyToColorConverter.cs","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/CustomDragDropBehavior/","Description":"Custom DragDropBehavior\r\nThis example shows how to implement and use a custom ScheduleViewDragDropBehavior. The functionality of example is explained below and demonstrates the use of all the methods available for overriding:\r\n-\tDrag and drop between ScheduleView and ListBox\r\n-\tCustom Appointment with IsReadOnly property which cannot be moved or resized and has different Background color (Red in the example)\r\n-\tThe Appointments cannot be resized to a duration below 30 minutes and above 2 hours\r\n-\tAll of the non ReadOnly Appointments in with same Resource should move together when single Appointment is dragged\r\n-\tAppointments cannot be moved from one Resource to another\r\n-\tDragging Appointment with Control key pressed doesn't copy the Appointment\r\n\r\n[//]:","KeyWords":"CustomDragDropBehavior,  scheduleviewdragdropbehavior, listbox, move, resize, readonly, appointments"},
{"Name":"CustomTimeRulerLinesTimelineView","ExampleInfo":{"Name":"CustomTimeRulerLinesTimelineView","DirectoryName":"CustomTimeRulerLinesTimelineView","ExampleFileNames":["CustomTimeRulerLinesTimelineView_WPF.csproj","App.xaml","App.xaml.cs","CustomTimeRulerItemStyleSelector.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","WeeklyTickProvider.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/CustomTimeRulerLinesTimelineView/","Description":"Custom Time Ruler Lines Timeline View\nThe example shows how to customize the TimeRulerItemsSyleSelector of the ScheduleView in order to apply different Styles to the TimeRulerLines. This is used, for example, to distinguish the weeks in TimelineViewDefinition. \n\n[//]:","KeyWords":"CustomTimeRulerLinesTimelineView,  timeruleritemssyleselector, distinguish, weeks"},
{"Name":"CutCopyPasteAppointments","ExampleInfo":{"Name":"CutCopyPasteAppointments","DirectoryName":"CutCopyPasteAppointments","ExampleFileNames":["CutCopyPasteAppointments_WPF.csproj","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/CutCopyPasteAppointments/","Description":"Cut Copy Paste Appointments\nThis example demonstrates how to cut, copy and paste appointments with the keyboard combinations (Ctrl+X, Ctrl+C, Ctrl+V) as well as with a ContextMenu.\n\n[//]:","KeyWords":"CutCopyPasteAppointments,  keyboard, contextmenu"},
{"Name":"WPF_CS","ExampleInfo":{"Name":"WPF_CS","DirectoryName":"WPF_CS","ExampleFileNames":["WithDB.csproj","App.Config","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ScheduleViewDataModel.Designer.cs","ScheduleViewDataModel.edmx","ScheduleViewDB.mdf","ScheduleViewDB_log.ldf","ScheduleViewRepository.cs","Helpers\\RecurrenceHelper.cs","Helpers\\SolidColorBrushHelper.cs","Models\\Category.cs","Models\\SqlAppointment.cs","Models\\SqlExceptionAppointment.cs","Models\\SqlExceptionOccurrence.cs","Models\\SqlRecurrenceRule.cs","Models\\SqlResource.cs","Models\\SqlResourceType.cs","Models\\TimeMarker.cs","Properties\\DataSources\\ScheduleViewDBEntities.datasource","Properties\\DataSources\\ScheduleViewDBEntities1.datasource","ViewModels\\ScheduleViewViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/Database/WPF_CS/","Description":"Binding to Database \r\nThis example demonstrates how to bind the RadScheduleView to a database. For more details on the approach, please refer to the following documentation:\r\nhttp://www.telerik.com/help/wpf/radscheduleview-populating-with-data-binding-to-db-overview.html\r\n\r\nYou can find a VB version of the project at the following link:\r\nhttps://github.com/telerik/xaml-sdk/tree/master/ScheduleView/Database/WPF_VB\r\n\r\n[//]:","KeyWords":"WPF_CS,  entityframework, wcf, riaservices, sqlserver"},
{"Name":"DatabaseEntityFramework","ExampleInfo":{"Name":"DatabaseEntityFramework","DirectoryName":"DatabaseEntityFramework","ExampleFileNames":["DatabaseEntityFramework_WPF.csproj","App.config","App.xaml","App.xaml.cs","Category.cs","CustoCreateDatabaseIfNotExists.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","RecurrenceHelper.cs","ScheduleViewEntities.cs","ScheduleViewRepository.cs","ScheduleViewViewModel.cs","SolidColorBrushHelper.cs","SqlAppointment.cs","SqlAppointmentResource.cs","SqlExceptionAppointment.cs","SqlExceptionOccurrence.cs","SqlExceptionResource.cs","SqlResource.cs","SqlResourceType.cs","TimeMarker.cs","Migrations\\201905311155532_Initial.cs","Migrations\\201905311155532_Initial.Designer.cs","Migrations\\201905311155532_Initial.resx","Migrations\\Configuration.cs","ModelExtensions\\Category.cs","ModelExtensions\\SqlAppointment.cs","ModelExtensions\\SqlExceptionAppointment.cs","ModelExtensions\\SqlExceptionOccurrence.cs","ModelExtensions\\SqlRecurrenceRule.cs","ModelExtensions\\SqlResource.cs","ModelExtensions\\SqlResourceType.cs","ModelExtensions\\TimeMarker.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/DatabaseEntityFramework/","Description":"Binding to Database using Entity Framework\r\nThis example demonstrates how to bind the RadScheduleView to a database using Entity Framework with Code-First Migrations.\r\n\r\n[//]:","KeyWords":"DatabaseEntityFramework,  entityframework, database, code-first, migrations, sqlserver"},
{"Name":"Exporting","ExampleInfo":{"Name":"Exporting","DirectoryName":"Exporting","ExampleFileNames":["Exporting_WPF.csproj","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/Exporting/","Description":"Exporting\nThis example demonstrates how you can use the ExportExtensions class (part of the Telerik.Windows.Controls assembly) in order to export the ScheduleView to an image or a XPS file ready for printing.\n\n[//]:","KeyWords":"Exporting,  image, xps, printing"},
{"Name":"GroupingAndFilteringWithTreeView","ExampleInfo":{"Name":"GroupingAndFilteringWithTreeView","DirectoryName":"GroupingAndFilteringWithTreeView","ExampleFileNames":["GroupingAndFilteringWithTreeView_WPF.csproj","Airline.cs","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Process.cs","Readme.md","Segregation.cs","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/GroupingAndFilteringWithTreeView/","Description":" Grouping And Filtering With Tree View\nThis example demonstrates grouping and filtering with TreeView control.","KeyWords":"GroupingAndFilteringWithTreeView"},
{"Name":"GroupingByTimeMarkers","ExampleInfo":{"Name":"GroupingByTimeMarkers","DirectoryName":"GroupingByTimeMarkers","ExampleFileNames":["GroupingByTimeMarkers_WPF.csproj","App.config","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","MyViewModel.cs","Readme.md","ResourceTypeToVisibilityConverter.cs","ScheduleViewHelper.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/GroupingByTimeMarkers/","Description":"Grouping By TimeMarker\r\nThis example demonstrates how to group the appointments of RadScheduleView by their TimeMarker.\r\n\r\n[//]:","KeyWords":"GroupingByTimeMarkers,  appointments"},
{"Name":"HierarchicalGroupingAndFilteringWithTreeView","ExampleInfo":{"Name":"HierarchicalGroupingAndFilteringWithTreeView","DirectoryName":"HierarchicalGroupingAndFilteringWithTreeView","ExampleFileNames":["HierarchicalGroupingAndFilteringWithTreeView_WPF.csproj","App.config","App.xaml","App.xaml.cs","Division.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","Team.cs","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/HierarchicalGroupingAndFilteringWithTreeView/","Description":" Hierarchical Grouping And Filtering With TreeView\r\nThis example demonstrates hierarchical grouping and filtering using TreeView control.","KeyWords":"HierarchicalGroupingAndFilteringWithTreeView"},
{"Name":"MonthTickProvider","ExampleInfo":{"Name":"MonthTickProvider","DirectoryName":"MonthTickProvider","ExampleFileNames":["MonthTickProvider_WPF.csproj","App.xaml","App.xaml.cs","CustomMonthTickProvider.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/MonthTickProvider/","Description":"Month Tick Provider\nThis example demonstrates how to customize the GroupTickLength property of the TimelineViewDefinition of the ScheduleView in order to make it look like YearView.\n\n[//]:","KeyWords":"MonthTickProvider,  timelineviewdefinition, groupticklength, yearview"},
{"Name":"MonthViewInitiallyExpanded","ExampleInfo":{"Name":"MonthViewInitiallyExpanded","DirectoryName":"MonthViewInitiallyExpanded","ExampleFileNames":["MonthViewInitiallyExpanded_WPF.csproj","App.xaml","App.xaml.cs","Data.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/MonthViewInitiallyExpanded/","Description":" MonthView initially expanded\r\nThis example demonstrates how to make the MonthView to be expanded by default when the control loads for Silverlight and WPF.","KeyWords":"MonthViewInitiallyExpanded"},
{"Name":"RemoveDeleteButton","ExampleInfo":{"Name":"RemoveDeleteButton","DirectoryName":"RemoveDeleteButton","ExampleFileNames":["RemoveDeleteButton_WPF.csproj","App.xaml","App.xaml.cs","CustomAppointmentStyleSelector.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/RemoveDeleteButton/","Description":" Remove Delete Button\nThis example demonstrates how to remove the Delete button from the Appointmnets in ScheduleView for Silverlight and WPF.","KeyWords":"RemoveDeleteButton"},
{"Name":"ResourcesPaging","ExampleInfo":{"Name":"ResourcesPaging","DirectoryName":"ResourcesPaging","ExampleFileNames":["ResourcesPaging_WPF.csproj","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/ResourcesPaging/","Description":"Resources Paging\nThis example demonstrates how to implement resources paging in RadScheduleView in the cases when there are too many resources.\n\n[//]:","KeyWords":"ResourcesPaging,  grouping, performance"},
{"Name":"SettingSelectedAppointments","ExampleInfo":{"Name":"SettingSelectedAppointments","DirectoryName":"SettingSelectedAppointments","ExampleFileNames":["SettingSelectedAppointments_WPF.csproj","App.config","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","SelectedAppointmentsHelper.cs","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/SettingSelectedAppointments/","Description":"Setting SelectedAppointments\r\nThis example demonstrates how to easily set the initial SelectedAppointments property to a collection of Appointments using an attached property.\r\n\r\n[//]:","KeyWords":"SettingSelectedAppointments,  attached, property, setting"},
{"Name":"SlotsAndAppointmentsNavigation","ExampleInfo":{"Name":"SlotsAndAppointmentsNavigation","DirectoryName":"SlotsAndAppointmentsNavigation","ExampleFileNames":["SlotsAndAppointmentsNavigation_WPF.csproj","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/SlotsAndAppointmentsNavigation/","Description":"Slots And Appointments Navigation\nThis example demonstrates how to implement navigation through the Appointments and Slots in the VisibleRange of the ScheduleView for Silverlight and WPF.\n\n[//]:","KeyWords":"SlotsAndAppointmentsNavigation,  visiblerange"},
{"Name":"SpecialSlotsToolTip","ExampleInfo":{"Name":"SpecialSlotsToolTip","DirectoryName":"SpecialSlotsToolTip","ExampleFileNames":["SpecialSlotsToolTip_WPF.csproj","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","SpecialSlotStyleSelector.cs","SpecialSlotTooltipHelper.cs","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/SpecialSlotsToolTip/","Description":"SpecialSlots ToolTip\r\nThis project demonstrates a way to set a ToolTip on a SpecialSlot.\r\n\r\n[//]:","KeyWords":"SpecialSlotsToolTip,  mouseoverhighlightstyle, specialslotssource, specialslotstyleselector"},
{"Name":"SpecialSlotsZIndex","ExampleInfo":{"Name":"SpecialSlotsZIndex","DirectoryName":"SpecialSlotsZIndex","ExampleFileNames":["SpecialSlotsZIndex_WPF.csproj","App.xaml","App.xaml.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","MyViewModel.cs","NonWorkingSlot.cs","SpecialSlotStyleSelector.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/SpecialSlotsZIndex/","Description":"SpecialSlots ZIndex\r\nThis example illustrates how you can choose which special slot to stay on top of the other by setting its ZIndex.\r\nThere is a possible approach the ZIndex to be bound in order to be manipulated from the ViewModel.\r\nThe button changes the ZIndex of the ReadOnlySlot in DayView, WeekView and Timeline.\r\nThe ZIndex of the NonWorkingHourSlots is bound to the ViewModel statically for MonthView.\r\n\r\n[//]:","KeyWords":"SpecialSlotsZIndex,  order, specialslotssource, specialslotstyleselector"},
{"Name":"TodayViewDefinition","ExampleInfo":{"Name":"TodayViewDefinition","DirectoryName":"TodayViewDefinition","ExampleFileNames":["TodayViewDefinition_WPF.csproj","App.xaml","App.xaml.cs","CustomTodayViewDefinition.cs","Example.xaml","Example.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ScheduleView/TodayViewDefinition/","Description":"Today ViewDefinition\r\nThis example demonstrates how to create a custom ViewDefinition for the RadScheduleView control in order to create one that will dispaly only the current (today) day for Silverlight and WPF.\r\n\r\n[//]:","KeyWords":"TodayViewDefinition,  custom, DayViewDefinition"}]