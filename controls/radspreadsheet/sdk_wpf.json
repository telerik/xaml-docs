[{"Name":"Custom ContextMenu","ExampleInfo":{"Name":"Custom ContextMenu","DirectoryName":"CustomContextMenu","ExampleFileNames":["CustomContextMenu_WPF.csproj","App_WPF.xaml","App_WPF.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","SelectionDependentCommand.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Spreadsheet/WPF/CustomContextMenu/","Description":"This example demonstrates how to customize the context menu of the worksheet editor and add a custom command that highlights the selected cells. You can find more details on the scenario in the following blog post: http://blogs.telerik.com/xamlteam/posts/14-04-14/radspreadsheet-tips-and-tricks-customize-the-context-menu-like-a-pro.","KeyWords":"Custom ContextMenu,  replace, inherit, modify,command,highlight"},
{"Name":"Custom Functions","ExampleInfo":{"Name":"Custom Functions","DirectoryName":"CustomFunctions","ExampleFileNames":["CustomFunctions_WPF.csproj","App.config","App_WPF.xaml","App_WPF.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Functions\\Add.cs","Functions\\Arguments.cs","Functions\\E.cs","Functions\\GeoMean.cs","Functions\\Indirect.cs","Functions\\Nand.cs","Functions\\RepeatString.cs","Functions\\Upper.cs","Resources\\ResourceHelper.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Spreadsheet/WPF/CustomFunctions/","Description":"This examples shows how to create and register custom functions in RadSpreadsheet.\r\nThe example shows several functions inheriting from different members from RadSpreadsheet functions inheritance tree.\r\n - Arguments and E functions are inheriting from FunctionBase abstract class.\r\n - RepeatString function is inheriting from FunctionWithArguments abstract class.\r\n - Indirect function is inheriting from FunctionWithArguments abstract class and is overriding the definition of the default RadSpreadsheet \"INDIRECT\" function. It also demonstrates the usage of CellReferenceRangeExpression.\r\n - Add and GeoMean functions are inheriting from NumbersInFunction abstract class and are using their own ArgumentConversionRules.\r\n - Nand function is inheriting from BooleansInFunction abstract class.\r\n - Upper function is inheriting from StringsInFunction abstract class and is overriding the definition of the default RadSpreadsheet \"UPPER\" function.\r\n \r\nYou should additionally notice that all this function classes are registered through the FunctionManager class, so that they can be used in RadSpreadsheet.","KeyWords":"Custom Functions,  cell,reference,range,expression,add,geomean,nand,upper,indirect"},
{"Name":"Custom Row And Column Headings","ExampleInfo":{"Name":"Custom Row And Column Headings","DirectoryName":"CustomRowAndColumnHeadings","ExampleFileNames":["CustomRowAndColumnHeadings_WPF.csproj","App.config","App_WPF.xaml","App_WPF.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","HeaderConverters\\DynamicHeaderNameRenderincConverter.cs","HeaderConverters\\NumberedColumnsHeaderNameRenderingConverter.cs","Resources\\ResourceHelper.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Spreadsheet/WPF/CustomRowAndColumnHeadings/","Description":"This examples shows how to change the row and column headers or hide them in RadSpreadsheet.\r\nThe example shows two different custom header name rendering converters:\r\n - NumberedColumnsHeaderNameRenderingConverter which makes all column headers to be numbers (1, 2, 3,...) instead of letters (A, B, C,...)\r\n - DynamicHeaderNameRenderingConverter which makes row and column headers that intersect with the table data on scroling to contain the data\r\n   from the first row and first column of the table.","KeyWords":"Custom Row And Column Headings,  dynamicheadernamerenderingconverter,numberedcolumnsheadernamerenderingconverter"},
{"Name":"First Look","ExampleInfo":{"Name":"First Look","DirectoryName":"FirstLook","ExampleFileNames":["FirstLook_WPF.csproj","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Spreadsheet/WPF/FirstLook/","Description":"This example shows how RadSpreadsheet can be used with its pre-defined UI that is automatically wired with all of the commands provided by the control and shows the full potential of the control.","KeyWords":"First Look,  integrated,integration,radribbonview,excel,look,design"},
{"Name":"Localization","ExampleInfo":{"Name":"Localization","DirectoryName":"Localization","ExampleFileNames":["Localization_WPF.csproj","App.config","App_WPF.xaml","App_WPF.xaml.cs","CustomLocalizationManager.cs","MainWindow.xaml","MainWindow.xaml.cs","RadSpreadsheetResources.de.resx","RadSpreadsheetResources.Designer.cs","RadSpreadsheetResources.resx"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Spreadsheet/WPF/Localization/","Description":"This example shows how the RadSpreadsheet can be localized.","KeyWords":"Localization,  language, translate, translation"},
{"Name":"RadToolBar UI","ExampleInfo":{"Name":"RadToolBar UI","DirectoryName":"RadToolBarUI","ExampleFileNames":["RadToolBarUI_WPF.csproj","App_WPF.xaml","App_WPF.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Spreadsheet/WPF/RadToolBarUI/","Description":"This example shows how to bind RadSpreadsheet to RadToolBar. The ToolBar contains buttons that allow the user to open, save and create files and to cut, copy and paste the contents of the worksheet.  You can find more details on the scenario in the following blog post: http://blogs.telerik.com/xamlteam/posts/14-03-21/radspreadsheet-tips-and-tricks-radtoolbar-in-radspreadsheet-no-problemo.","KeyWords":"RadToolBar UI,  simple, open, save"},
{"Name":"Thread Safe Format Provider","ExampleInfo":{"Name":"Thread Safe Format Provider","DirectoryName":"ThreadSafeFormatProvider","ExampleFileNames":["ThreadSafeFormatProvider_WPF.csproj","App.config","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Resources\\ResourceHelper.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Spreadsheet/WPF/ThreadSafeFormatProvider/","Description":"This WPF example shows how RadSpreadsheet provides an easy solution for making import and export of files asynchronous and thread safe.\r\nThe example UserControl provides four buttons:\r\n - \"Open file synchronously\" button opens big file synchronously. When pressing this button you may see how the UI thread is unresponsive during the time-consuming import.\r\n - \"Open file asynchronously\" button opens the same big file asynchronously. When pressing this button you may notice that the UI thread is responsive as it successfully shows the loading RadBusyIndicator during the import.\r\n - \"Save file synchronously\" button saves current Workbook to file synchronously. When pressing this button you may see how the UI thread is unresponsive during the export (this is easier to be noticed when saving big files with time-consuming export).\r\n - \"Save file asynchronously\" button saves current Workbook to file asynchronously. When pressing this button you may notice that the UI thread is responsive as you may interact freely with the UserControl during the export.","KeyWords":"Thread Safe Format Provider,  open,save,synchronously,asynchronously,bigfile,xlsx,csv,save,import,export"},
{"Name":"Worksheet editor ContextMenu","ExampleInfo":{"Name":"Worksheet editor ContextMenu","DirectoryName":"WorksheetEditorContextMenu","ExampleFileNames":["WorksheetEditorContextMenu_WPF.csproj","App_WPF.xaml","App_WPF.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/Spreadsheet/WPF/WorksheetEditorContextMenu/","Description":"This examples sets up a simple menu with several commands: cut, copy, paste, clear contents. Also the menu has two items allow the user to insert and delete cells respectively.","KeyWords":"Worksheet editor ContextMenu,  replace, inherit, modify,cut,copy,paste,clearcontent,insert,delete"}]