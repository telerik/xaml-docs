[{"Name":"AutoBindAttachedBehavior","ExampleInfo":{"Name":"AutoBindAttachedBehavior","DirectoryName":"AutoBindAttachedBehavior","ExampleFileNames":["AutoBindAttachedBehavior_WPF.csproj","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/AutoBindAttachedBehavior/","Description":" AutoBind Attached Behavior\r\nThe need of reusable DataTemplates is a common scenario with quite few universal viable solutions. \r\nThis example shows how the AutoBind attached behavior can enable RadPropertyGrid to use a single DataTemplate resource as an EditorTemplate value for multiple PropertyDefinitions without any additional effort on the users' side.\r\n\r\nSee Also:\r\nWPF: http://docs.telerik.com/devtools/wpf/controls/radpropertygrid/features/autobind.html\r\nSL: http://docs.telerik.com/devtools/silverlight/controls/radpropertygrid/features/autobind.html","KeyWords":"AutoBindAttachedBehavior"},
{"Name":"BindPropertyDefinitionsViewModel","ExampleInfo":{"Name":"BindPropertyDefinitionsViewModel","DirectoryName":"BindPropertyDefinitionsViewModel","ExampleFileNames":["BindPropertyDefinitionsViewModel.csproj","App.config","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","MainWindowViewModel.cs","PropertyDefinitionsBehavior.cs","Setting.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/BindPropertyDefinitionsViewModel/","Description":"Binding PropertyDefinitions From ViewModel\nThis example demonstrates how to implement a custom attached behavior in order to bind the PropertyDefinitions property to a collection from your ViewModel. You can check the code in PropertyDefinitionsBehavior.cs.\n\n[//]:","KeyWords":"BindPropertyDefinitionsViewModel,  attached, behavior, binding, property, definitions, viewmodel"},
{"Name":"CollectionEditorCustomDataType","ExampleInfo":{"Name":"CollectionEditorCustomDataType","DirectoryName":"CollectionEditorCustomDataType","ExampleFileNames":["CollectionEditorCustomDataType_WPF.csproj","App.xaml","App.xaml.cs","CustomString.cs","MainWindow.xaml","MainWindow.xaml.cs","MyViewModel.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/CollectionEditorCustomDataType/","Description":" CollectionEditor with Built in Data Type\r\nThis example demonstrates how to use CollectionEditor with custom data type. Built-in data types(as string, for example) does not have a default constructor, \r\nthus cannot be added to the Collection editor's source collection. This can be achieved by using a custom object and casting it \r\nto the one needed through an implicit operator.\r\n\r\nSee also:\r\nWPF: http://docs.telerik.com/devtools/wpf/controls/radpropertygrid/features/collectioneditor.html\r\nSL: http://docs.telerik.com/devtools/silverlight/controls/radpropertygrid/features/collectioneditor.html","KeyWords":"CollectionEditorCustomDataType"},
{"Name":"CollectionEditors","ExampleInfo":{"Name":"CollectionEditors","DirectoryName":"CollectionEditors","ExampleFileNames":["CollectionEditors_WPF.csproj","App.xaml","App.xaml.cs","Club.cs","MainWindow.xaml","MainWindow.xaml.cs","MyViewModel.cs","Player.cs","Position.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/CollectionEditors/","Description":" CollectionEditor\r\nThis example demonstrates how to use CollectionEditor - control that provides UI for editing collections and their items.\r\nOn the left side a ListBox generates its items based on CollectionEditor's source. \r\nOn the right side RadPropertyGrid is generated for editing each item.\r\n\r\nSee also:\r\nWPF: http://docs.telerik.com/devtools/wpf/controls/radpropertygrid/features/collectioneditor.html\r\nSL: http://docs.telerik.com/devtools/silverlight/controls/radpropertygrid/features/collectioneditor.html","KeyWords":"CollectionEditors"},
{"Name":"ComboboxEditorBooleanProperty","ExampleInfo":{"Name":"ComboboxEditorBooleanProperty","DirectoryName":"ComboboxEditorBooleanProperty","ExampleFileNames":["ComboboxEditorBooleanProperty_WPF.csproj","App.xaml","App.xaml.cs","BoolToIndexConverter.cs","Employee.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/ComboboxEditorBooleanProperty/","Description":" Combobox editor for Boolean property\r\nThis example demonstrates how to show RadCombobox as an editor for Boolean property.\r\n\r\nSee also:\r\nWPF: http://docs.telerik.com/devtools/wpf/controls/radcombobox/overview.html\r\nSL: http://docs.telerik.com/devtools/silverlight/controls/radcombobox/overview.html","KeyWords":"ComboboxEditorBooleanProperty"},
{"Name":"CustomFiltering","ExampleInfo":{"Name":"CustomFiltering","DirectoryName":"CustomFiltering","ExampleFileNames":["CustomFiltering_WPF.csproj","App.xaml","App.xaml.cs","Club.cs","MainWindow.xaml","MainWindow.xaml.cs","MyPropertyDefinition.cs","MyViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/CustomFiltering/","Description":" Custom Filtering\r\n\r\nThis example demonstrates how to filter RadPropertyGrid by the values of its property definitions as well as their DisplayName by overriding the PropertyDefinition class' IsFiltered property.\r\n\r\nSee also:\r\nWPF: http://docs.telerik.com/devtools/wpf/controls/radpropertygrid/features/filtering.html\r\nSL: http://docs.telerik.com/devtools/silverlight/controls/radpropertygrid/features/filtering.html","KeyWords":"CustomFiltering"},
{"Name":"CustomHyperlinkToolTip","ExampleInfo":{"Name":"CustomHyperlinkToolTip","DirectoryName":"CustomHyperlinkToolTip","ExampleFileNames":["CustomHyperlinkToolTip_WPF.csproj","App.xaml","App.xaml.cs","CustomToolTipBehavior.cs","Employee.cs","HyperlinkNavigationBehavior.cs","InfoTipData.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/CustomHyperlinkToolTip/","Description":" Custom ToolTip in PropertyGridField \r\nThis example demonstrates how to add a custom ToolTip with Hyperlink in PropertyGridField. \r\nHover on each \"Help\" button to see the custom tooltip.\r\n\r\n\r\n","KeyWords":"CustomHyperlinkToolTip"},
{"Name":"CustomKeyboardCommandProvider","ExampleInfo":{"Name":"CustomKeyboardCommandProvider","DirectoryName":"CustomKeyboardCommandProvider","ExampleFileNames":["CustomKeyboardCommandProvider_WPF.csproj","App.xaml","App.xaml.cs","CustomKeyboardCommandProvider.cs","Employee.cs","MainWindow.xaml","MainWindow.xaml.cs","Order.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/CustomKeyboardCommandProvider/","Description":" Custom Keyboard Command Provider \r\nRadPropertyGrid provides an easy MVVM-friendly approach for customization of its default commands' logic. \r\nThis example demonstrates how to extend the way RadPropertyGrid handles a particular key. \r\nPress Tab to navigate forward through RadPropertyGrid elements or pres Shift+Tab to navigate backwards.\r\n\r\nSee also:\r\nWPF: http://docs.telerik.com/devtools/wpf/controls/radpropertygrid/features/keyboard-support.html\r\nSL: http://docs.telerik.com/devtools/silverlight/controls/radpropertygrid/features/keyboard-support.html","KeyWords":"CustomKeyboardCommandProvider"},
{"Name":"EditModes","ExampleInfo":{"Name":"EditModes","DirectoryName":"EditModes","ExampleFileNames":["EditModes_WPF.csproj","App.xaml","App.xaml.cs","Employee.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/EditModes/","Description":" Edit Modes\r\nThis example demonstrates how the editing behavior of RadPropertyGrid can be modified via EditMode property.\r\n\r\nSee also:\r\nWPF: http://docs.telerik.com/devtools/wpf/controls/radpropertygrid/features/edit-modes\r\nSL: http://docs.telerik.com/devtools/silverlight/controls/radpropertygrid/features/edit-modes","KeyWords":"EditModes"},
{"Name":"EditorAttribute","ExampleInfo":{"Name":"EditorAttribute","DirectoryName":"EditorAttribute","ExampleFileNames":["EditorAttribute_WPF.csproj","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","PhoneEditorControl.xaml","PhoneEditorControl.xaml.cs","PhoneNumber.cs","Player.cs","Readme.md","ViewModel.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/EditorAttribute/","Description":" Editor Attribute\r\nThis example demonstrates how through the EditorAttribute the user can define an editor for each property directly in its definition.\r\n\r\nSee also:\r\nWPF: http://docs.telerik.com/devtools/wpf/controls/radpropertygrid/features/editor-attribute\r\nSL: http://docs.telerik.com/devtools/silverlight/controls/radpropertygrid/features/editor-attribute","KeyWords":"EditorAttribute"},
{"Name":"FileUploadWithEditorTemplateSelector","ExampleInfo":{"Name":"FileUploadWithEditorTemplateSelector","DirectoryName":"FileUploadWithEditorTemplateSelector","ExampleFileNames":["FileUploadWithEditorTemplateSelector_WPF.csproj","App.config","App.xaml","App.xaml.cs","FileUploadTemplateSelector.cs","MainWindow.xaml","MainWindow.xaml.cs","User.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/FileUploadWithEditorTemplateSelector/","Description":"AutoBindBehavior with EditorTemplateSelector\r\nThis example demonstrates how to integrate the AutoBindBehavior with RadPropertyGrid's EditorTemplateSelector. It also shows how you can bind a property of your business object to the selected file of an OpenFileDialog.\r\n\r\n[//]:","KeyWords":"FileUploadWithEditorTemplateSelector,  datatemplateselector"},
{"Name":"FlagEnumEditor","ExampleInfo":{"Name":"FlagEnumEditor","DirectoryName":"FlagEnumEditor","ExampleFileNames":["FlagEnumEditor_WPF.csproj","App.xaml","App.xaml.cs","Employee.cs","MainWindow.xaml","MainWindow.xaml.cs","Permissions.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/FlagEnumEditor/","Description":" FlagEnumEditor\r\nThis example demonstrates how RadPropertyGrid can be used to edit bit flag enum through its FlagEnumEditor property.\r\nIt enables the user to store any combination of the values that are defined in the enumerator list.\r\n\r\nSee also:\r\nWPF: http://docs.telerik.com/devtools/wpf/controls/radpropertygrid/features/radenumeditor\r\nSL: http://docs.telerik.com/devtools/silverlight/controls/radpropertygrid/features/radenumeditor","KeyWords":"FlagEnumEditor"},
{"Name":"GroupNameTooltip","ExampleInfo":{"Name":"GroupNameTooltip","DirectoryName":"GroupNameTooltip","ExampleFileNames":["GroupNameTooltip_WPF.csproj","App.xaml","App.xaml.cs","Employee.cs","MainWindow.xaml","MainWindow.xaml.cs","Order.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/GroupNameTooltip/","Description":" Show Tooltip for GroupName\r\nThis example demonstrates how to show a tooltip for PropertyGridField's GroupName.","KeyWords":"GroupNameTooltip"},
{"Name":"GroupStyle","ExampleInfo":{"Name":"GroupStyle","DirectoryName":"GroupStyle","ExampleFileNames":["GroupStyle_WPF.csproj","App.xaml","App.xaml.cs","Employee.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/GroupStyle/","Description":" GroupStyle\r\nThis example demonstrates how to add a common style for the groups of RadPropertyGrid\r\n\r\n","KeyWords":"GroupStyle"},
{"Name":"GroupStyleSelector","ExampleInfo":{"Name":"GroupStyleSelector","DirectoryName":"GroupStyleSelector","ExampleFileNames":["GroupStyleSelector_WPF.csproj","App.xaml","App.xaml.cs","Employee.cs","MainWindow.xaml","MainWindow.xaml.cs","MyGroupStyleSelector.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/GroupStyleSelector/","Description":" GroupStyleSelector\r\nThis example demonstrates how to conditionally apply a Group Style for RadPropertyGrid.\r\n","KeyWords":"GroupStyleSelector"},
{"Name":"ReadOnlyEditorState","ExampleInfo":{"Name":"ReadOnlyEditorState","DirectoryName":"ReadOnlyEditorState","ExampleFileNames":["ReadOnlyEditorState_WPF.csproj","App.xaml","App.xaml.cs","Employee.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/ReadOnlyEditorState/","Description":" ReadOnlyEditorState\r\nThis example demonstrates how a read only behavior of RadPropertyGrid can be defined through ReadOnlyEditorState property.\r\nYou can check the different states of the property by clicking the ToggleButton at the top.\r\n\r\nSee also:\r\nWPF: http://docs.telerik.com/devtools/wpf/controls/radpropertygrid/features/readonlyeditorstate\r\nSL: http://docs.telerik.com/devtools/silverlight/controls/radpropertygrid/features/readonlyeditorstate","KeyWords":"ReadOnlyEditorState"},
{"Name":"ReadOnlyPropertyDefinition","ExampleInfo":{"Name":"ReadOnlyPropertyDefinition","DirectoryName":"ReadOnlyPropertyDefinition","ExampleFileNames":["ReadOnlyPropertyDefinition_WPF.csproj","App.xaml","App.xaml.cs","Club.cs","MainWindow.xaml","MainWindow.xaml.cs","MyViewModel.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/ReadOnlyPropertyDefinition/","Description":" ReadOnly PropertyDefinition\r\nThis example demonstrates how to control which property definitions of RadPropertyGrid to be read only.\r\n\r\n\r\nWPF: http://docs.telerik.com/devtools/wpf/controls/radpropertygrid/how-to/howto-readonly-propertydefinitions\r\nSL: http://docs.telerik.com/devtools/silverlight/controls/radpropertygrid/how-to/howto-readonly-propertydefinitions","KeyWords":"ReadOnlyPropertyDefinition"},
{"Name":"ScrollIntoViewAsync","ExampleInfo":{"Name":"ScrollIntoViewAsync","DirectoryName":"ScrollIntoViewAsync","ExampleFileNames":["ScrollIntoViewAsync_WPF.csproj","App.xaml","App.xaml.cs","Employee.cs","MainWindow.xaml","MainWindow.xaml.cs","Readme.md"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/ScrollIntoViewAsync/","Description":" ScrollIntoViewAsync\r\nThis example demonstrates how to scroll to a particular PropertyDefinition and select it.\r\nClick on the bottom button to observe the behavior.\r\n\r\nSee also:\r\nWPF: http://docs.telerik.com/devtools/wpf/controls/radpropertygrid/features/scrolling\r\nSL: http://docs.telerik.com/devtools/silverlight/controls/radpropertygrid/features/scrolling","KeyWords":"ScrollIntoViewAsync"},
{"Name":"Validation","ExampleInfo":{"Name":"Validation","DirectoryName":"Validation","ExampleFileNames":["Validation_WPF.csproj","App.xaml","App.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","MyTestClass.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/Validation/","Description":" Validation\r\nRadPropertyGrid supports validation through IDataErrorInfo and also through DataAnnotations. This example demonstrates how to implement such validation.\r\n\r\nSee also:\r\nWPF: http://docs.telerik.com/devtools/wpf/controls/radpropertygrid/features/validation\r\nSL: http://docs.telerik.com/devtools/silverlight/controls/radpropertygrid/features/validation","KeyWords":"Validation"},
{"Name":"ValidationINotifyDataErrorInfo","ExampleInfo":{"Name":"ValidationINotifyDataErrorInfo","DirectoryName":"ValidationINotifyDataErrorInfo","ExampleFileNames":["INotifyDataErrorInfoSupport.csproj","App.xaml","App.xaml.cs","Club.cs","MainWindow.xaml","MainWindow.xaml.cs","MyViewModel.cs","NotifyingObject.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/PropertyGrid/ValidationINotifyDataErrorInfo/","Description":" Validation with INotifyDataErrorInfo This example demonstrates how to implement INotifyDataErrorInfo validation in the RadPropertyGrid control.\r\n\r\nSee also: \r\nWPF: http://docs.telerik.com/devtools/wpf/controls/radpropertygrid/features/validation\r\nSL: http://docs.telerik.com/devtools/silverlight/controls/radpropertygrid/features/validation","KeyWords":"ValidationINotifyDataErrorInfo"}]