[{"Name":"CustomImageFormatProvider","ExampleInfo":{"Name":"CustomImageFormatProvider","DirectoryName":"CustomImageFormatProvider","ExampleFileNames":["CustomImageFormatProvider_WPF.csproj","App.xaml","App.xaml.cs","ImageEditor.xaml","ImageEditor.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","ImageFormatProviders\\DrawingImageFormatProviderBase.cs","ImageFormatProviders\\EnhancedMetafileFormatProvider.cs","ImageFormatProviders\\ExifFormatProvider.cs","ImageFormatProviders\\FreeImageFormatProviderBase.cs","ImageFormatProviders\\Jpeg2000FormatProvider.cs","ImageFormatProviders\\TargaFormatProvider.cs","ImageFormatProviders\\WindowsMetafileFormatProvider.cs","SampleImages\\telerik.jpf","SampleImages\\telerik.tga","Utilities\\Extensions.cs","Utilities\\ImageExampleHelper.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ImageEditor/CustomImageFormatProvider/","Description":" Custom Image Format Provider\nThis example demonstrates how you could implement a custom image format provider using a third party library*, which encodes/decodes different image types. \r\n\r\n* This software uses the FreeImage open source image library. See http://freeimage.sourceforge.net for details.\r\nFreeImage is used under the FIPL, version 1.0. The full version of the license can be found at http://freeimage.sourceforge.net/freeimage-license.txt","KeyWords":"CustomImageFormatProvider"},
{"Name":"CustomUIRadImageEditor","ExampleInfo":{"Name":"CustomUIRadImageEditor","DirectoryName":"CustomUIRadImageEditor","ExampleFileNames":["CustomUIRadImageEditor_WPF.csproj","App.config","App.xaml","App.xaml.cs","CustomSettingsContainer.xaml","CustomSettingsContainer.xaml.cs","ImageExampleHelper.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ImageEditor/CustomUIRadImageEditor/","Description":"  Custom UI \r\nIn this sample you can see how to create custom UI for RadImageEditor. A custom container for settings is implemented in a user control and set to be the image editor's ToolSettingsContainer.","KeyWords":"CustomUIRadImageEditor"},
{"Name":"CustomWatermarkTool","ExampleInfo":{"Name":"CustomWatermarkTool","DirectoryName":"CustomWatermarkTool","ExampleFileNames":["CustomWatermarkTool_WPF.csproj","App.config","App.xaml","App.xaml.cs","ImageExampleHelper.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","WatermarkCommand.cs","WatermarkCommandContext.cs","WatermarkTool.cs","WatermarkToolSettings.xaml","WatermarkToolSettings.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ImageEditor/CustomWatermarkTool/","Description":" Custom Watermark Tool\nThe example shows how a custom tool can be build. A respective command and tool settings have been implemented as well and wired to work with RadImageEditorUI.","KeyWords":"CustomWatermarkTool"},
{"Name":"Drawing","ExampleInfo":{"Name":"Drawing","DirectoryName":"Drawing","ExampleFileNames":["Drawing_WPF.csproj","App_WPF.xaml","App_WPF.xaml.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs","Shapes\\TelerikLogo.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ImageEditor/Drawing/","Description":" Drawing\nThis example demonstrates how to implement a custom shape and use it in the Draw Tool of the RadImageEditor. The example utilizes the implicit styling approach explained at http://docs.telerik.com/devtools/wpf/styling-and-appearance/styling-apperance-implicit-styles-overview.html.","KeyWords":"Drawing"},
{"Name":"HandleToolCommit","ExampleInfo":{"Name":"HandleToolCommit","DirectoryName":"HandleToolCommit","ExampleFileNames":["HandleToolCommit_WPF.csproj","App.xaml","App.xaml.cs","DoubleToStringConverter.cs","ImageImporter.cs","ImageInfo.cs","MainWindow.xaml","MainWindow.xaml.cs","RadImageEditor.xaml","RadImageEditor.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ImageEditor/HandleToolCommit/","Description":"  Handle Tool Commit \r\nThe example demonstrates how you can manipulate with RadImageEditor by handling its ToolCommitting and ToolCommitted events.","KeyWords":"HandleToolCommit"},
{"Name":"Localization","ExampleInfo":{"Name":"Localization","DirectoryName":"Localization","ExampleFileNames":["Localization_WPF.csproj","App.config","App.xaml","App.xaml.cs","ImageExampleHelper.cs","MainWindow.xaml","MainWindow.xaml.cs","RadImageEditorResources.Designer.cs","RadImageEditorResources.resx"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ImageEditor/Localization/","Description":" Localization\nThe example shows how RadImageEditor along with the predefined UI of the control can be localized.","KeyWords":"Localization"},
{"Name":"RadImageEditorUIFirstLook","ExampleInfo":{"Name":"RadImageEditorUIFirstLook","DirectoryName":"RadImageEditorUIFirstLook","ExampleFileNames":["RadImageEditorUIFirstLook_WPF.csproj","App.config","App.xaml","App.xaml.cs","ImageExampleHelper.cs","MainPage.xaml","MainPage.xaml.cs","MainWindow.xaml","MainWindow.xaml.cs"]},"GitHubPath":"https://api.github.com/repos/telerik/xaml-sdk/contents/ImageEditor/RadImageEditorUIFirstLook/","Description":"  First look \r\nThe example demonstrates how to use the predefined UI of RadImageEditor - RadImageEditorUI, with all implemented editing tools. It also shows how to load a file in the image editor.","KeyWords":"RadImageEditorUIFirstLook"}]